{
    "accuracy": 0.7325,
    "correct_count": 293,
    "total_count": 400
}
{
    "id": 8,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'unit': 'cm'. Expected one of ['inches', 'in']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_7",
        "question": [
            [
                {
                    "role": "user",
                    "content": "What is the circumference of a circle with a radius of 4 inches?"
                }
            ]
        ],
        "function": [
            {
                "name": "calculate_circumference",
                "description": "Calculates the circumference of a circle with a given radius.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "radius": {
                            "type": "integer",
                            "description": "The radius of the circle in the unit given."
                        },
                        "unit": {
                            "type": "string",
                            "description": "The unit of measurement for the radius. Default is 'cm'."
                        }
                    },
                    "required": [
                        "radius"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"calculate_circumference\", \"arguments\": {\"radius\": 4, \"unit\": \"cm\"}}]\n",
    "model_result_decoded": [
        {
            "calculate_circumference": {
                "radius": 4,
                "unit": "cm"
            }
        }
    ],
    "possible_answer": [
        {
            "calculate_circumference": {
                "radius": [
                    4
                ],
                "unit": [
                    "inches",
                    "in"
                ]
            }
        }
    ]
}
{
    "id": 14,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Nested type checking failed for parameter 'interval'. Expected outer type array with inner type <class 'float'>. Parameter value: [1, 3]."
    ],
    "error_type": "type_error:nested",
    "prompt": {
        "id": "simple_13",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Calculate the area under the curve y=x^2 from x=1 to x=3."
                }
            ]
        ],
        "function": [
            {
                "name": "calculate_area_under_curve",
                "description": "Calculate the area under a mathematical function within a given interval.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "function": {
                            "type": "string",
                            "description": "The mathematical function as a string."
                        },
                        "interval": {
                            "type": "array",
                            "items": {
                                "type": "float"
                            },
                            "description": "An array that defines the interval to calculate the area under the curve from the start to the end point."
                        },
                        "method": {
                            "type": "string",
                            "description": "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."
                        }
                    },
                    "required": [
                        "function",
                        "interval"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"calculate_area_under_curve\", \"arguments\": {\"function\": \"x**2\", \"interval\": [1, 3], \"method\": \"trapezoidal\"}}]\n",
    "model_result_decoded": [
        {
            "calculate_area_under_curve": {
                "function": "x**2",
                "interval": [
                    1,
                    3
                ],
                "method": "trapezoidal"
            }
        }
    ],
    "possible_answer": [
        {
            "calculate_area_under_curve": {
                "function": [
                    "x**2",
                    "lambda x: x**2",
                    "y=x**2"
                ],
                "interval": [
                    [
                        1.0,
                        3.0
                    ]
                ],
                "method": [
                    "",
                    "trapezoidal"
                ]
            }
        }
    ]
}
{
    "id": 18,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'formatted': False. Expected one of [True, '']."
    ],
    "error_type": "value_error:others",
    "prompt": {
        "id": "simple_17",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find the prime factors of 450"
                }
            ]
        ],
        "function": [
            {
                "name": "get_prime_factors",
                "description": "Function to retrieve prime factors of a number.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "number": {
                            "type": "integer",
                            "description": "Number for which prime factors need to be calculated"
                        },
                        "formatted": {
                            "type": "boolean",
                            "description": "Return formatted string if true, array if false. Default is true."
                        }
                    },
                    "required": [
                        "number",
                        "formatted"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"get_prime_factors\", \"arguments\": {\"number\": 450, \"formatted\": false}}]\n",
    "model_result_decoded": [
        {
            "get_prime_factors": {
                "number": 450,
                "formatted": false
            }
        }
    ],
    "possible_answer": [
        {
            "get_prime_factors": {
                "number": [
                    450
                ],
                "formatted": [
                    true,
                    ""
                ]
            }
        }
    ]
}
{
    "id": 33,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'initial_velocity': 100. Expected one of [0]."
    ],
    "error_type": "value_error:others",
    "prompt": {
        "id": "simple_32",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Calculate the final speed of an object dropped from 100 m without air resistance."
                }
            ]
        ],
        "function": [
            {
                "name": "calculate_final_speed",
                "description": "Calculate the final speed of an object dropped from a certain height without air resistance.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "initial_velocity": {
                            "type": "integer",
                            "description": "The initial velocity of the object."
                        },
                        "height": {
                            "type": "integer",
                            "description": "The height from which the object is dropped."
                        },
                        "gravity": {
                            "type": "float",
                            "description": "The gravitational acceleration. Default is 9.8 m/s^2."
                        }
                    },
                    "required": [
                        "initial_velocity",
                        "height"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"calculate_final_speed\", \"arguments\": {\"initial_velocity\": 100, \"height\": 100}}]\n",
    "model_result_decoded": [
        {
            "calculate_final_speed": {
                "initial_velocity": 100,
                "height": 100
            }
        }
    ],
    "possible_answer": [
        {
            "calculate_final_speed": {
                "initial_velocity": [
                    0
                ],
                "height": [
                    100
                ],
                "gravity": [
                    9.8,
                    ""
                ]
            }
        }
    ]
}
{
    "id": 36,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'operating_hours': 11. Expected one of [23]."
    ],
    "error_type": "value_error:others",
    "prompt": {
        "id": "simple_35",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find an all vegan restaurant in New York that opens until at least 11 PM."
                }
            ]
        ],
        "function": [
            {
                "name": "vegan_restaurant.find_nearby",
                "description": "Locate nearby vegan restaurants based on specific criteria like operating hours.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "The city and state, e.g. New York, NY, you should format it as City, State."
                        },
                        "operating_hours": {
                            "type": "integer",
                            "description": "Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format. Default is 24."
                        }
                    },
                    "required": [
                        "location"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"vegan_restaurant.find_nearby\", \"arguments\": {\"location\": \"New York, NY\", \"operating_hours\": 11}}]\n",
    "model_result_decoded": [
        {
            "vegan_restaurant.find_nearby": {
                "location": "New York, NY",
                "operating_hours": 11
            }
        }
    ],
    "possible_answer": [
        {
            "vegan_restaurant.find_nearby": {
                "location": [
                    "New York, NY"
                ],
                "operating_hours": [
                    23
                ]
            }
        }
    ]
}
{
    "id": 45,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid syntax. Failed to decode AST. Expecting ',' delimiter: line 1 column 124 (char 123)"
    ],
    "error_type": "ast_decoder:decoder_failed",
    "prompt": {
        "id": "simple_44",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Calculate the electric field strength 4 meters away from a charge of 0.01 Coulombs."
                }
            ]
        ],
        "function": [
            {
                "name": "calculate_electric_field_strength",
                "description": "Calculate the electric field strength at a certain distance from a point charge.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "charge": {
                            "type": "float",
                            "description": "The charge in Coulombs."
                        },
                        "distance": {
                            "type": "integer",
                            "description": "The distance from the charge in meters."
                        },
                        "medium": {
                            "type": "string",
                            "description": "The medium in which the charge and the point of calculation is located. Default is 'vacuum'."
                        }
                    },
                    "required": [
                        "charge",
                        "distance"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"calculate_electric_field_strength\", \"arguments\": {\"type\": \"float\", \"arguments\": {\"charge\": 0.01, \"distance\": 4}}]\n",
    "possible_answer": [
        {
            "calculate_electric_field_strength": {
                "charge": [
                    0.01
                ],
                "distance": [
                    4
                ],
                "medium": [
                    "",
                    "vacuum"
                ]
            }
        }
    ]
}
{
    "id": 46,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'phase_transition': 'boiling'. Expected one of ['vaporization']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_45",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Calculate the energy (in Joules) absorbed or released during the phase change of 100g of water from liquid to steam at its boiling point."
                }
            ]
        ],
        "function": [
            {
                "name": "thermo.calculate_energy",
                "description": "Calculate the energy required or released during a phase change using mass, the phase transition temperature and the specific latent heat.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "mass": {
                            "type": "integer",
                            "description": "Mass of the substance in grams."
                        },
                        "phase_transition": {
                            "type": "string",
                            "description": "Phase transition. Can be 'melting', 'freezing', 'vaporization', 'condensation'."
                        },
                        "substance": {
                            "type": "string",
                            "description": "The substance which is undergoing phase change, default is 'water'"
                        }
                    },
                    "required": [
                        "mass",
                        "phase_transition"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"thermo.calculate_energy\", \"arguments\": {\"mass\": 100, \"phase_transition\": \"boiling\", \"substance\": \"water\"}}]\n",
    "model_result_decoded": [
        {
            "thermo.calculate_energy": {
                "mass": 100,
                "phase_transition": "boiling",
                "substance": "water"
            }
        }
    ],
    "possible_answer": [
        {
            "thermo.calculate_energy": {
                "mass": [
                    100
                ],
                "phase_transition": [
                    "vaporization"
                ],
                "substance": [
                    "water",
                    ""
                ]
            }
        }
    ]
}
{
    "id": 55,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'species': 'human'. Expected one of ['Homo sapiens', '']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_54",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Identify the protein sequence of a given human gene 'BRCA1'."
                }
            ]
        ],
        "function": [
            {
                "name": "get_protein_sequence",
                "description": "Retrieve the protein sequence encoded by a human gene.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "gene": {
                            "type": "string",
                            "description": "The human gene of interest."
                        },
                        "species": {
                            "type": "string",
                            "description": "The species for which the gene is to be analyzed.",
                            "default": "Homo sapiens"
                        }
                    },
                    "required": [
                        "gene"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"get_protein_sequence\", \"arguments\": {\"gene\": \"BRCA1\", \"species\": \"human\"}}]\n",
    "model_result_decoded": [
        {
            "get_protein_sequence": {
                "gene": "BRCA1",
                "species": "human"
            }
        }
    ],
    "possible_answer": [
        {
            "get_protein_sequence": {
                "gene": [
                    "BRCA1"
                ],
                "species": [
                    "Homo sapiens",
                    ""
                ]
            }
        }
    ]
}
{
    "id": 57,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'cell_compartment': 'plasma'. Expected one of ['plasma membrane']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_56",
        "question": [
            [
                {
                    "role": "user",
                    "content": "What are the names of proteins found in the plasma membrane?"
                }
            ]
        ],
        "function": [
            {
                "name": "cellbio.get_proteins",
                "description": "Get the list of proteins in a specific cell compartment.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "cell_compartment": {
                            "type": "string",
                            "description": "The specific cell compartment."
                        },
                        "include_description": {
                            "type": "boolean",
                            "description": "Set true if you want a brief description of each protein.",
                            "default": "false"
                        }
                    },
                    "required": [
                        "cell_compartment"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"cellbio.get_proteins\", \"arguments\": {\"cell_compartment\": \"plasma\", \"include_description\": false}}]\n",
    "model_result_decoded": [
        {
            "cellbio.get_proteins": {
                "cell_compartment": "plasma",
                "include_description": false
            }
        }
    ],
    "possible_answer": [
        {
            "cellbio.get_proteins": {
                "cell_compartment": [
                    "plasma membrane"
                ],
                "include_description": [
                    "",
                    true,
                    false
                ]
            }
        }
    ]
}
{
    "id": 60,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'to_unit': 'gram/mole'. Expected one of ['grams/mole', 'g/mol']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_59",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Calculate the molecular weight of Glucose (C6H12O6) in grams/mole."
                }
            ]
        ],
        "function": [
            {
                "name": "calculate_molecular_weight",
                "description": "Calculate the molecular weight of a compound given the compound formula.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "compound": {
                            "type": "string",
                            "description": "The molecular formula of the compound."
                        },
                        "to_unit": {
                            "type": "string",
                            "description": "The unit in which to return the result."
                        }
                    },
                    "required": [
                        "compound",
                        "to_unit"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"calculate_molecular_weight\", \"arguments\": {\"compound\": \"C6H12O6\", \"to_unit\": \"gram/mole\"}}]\n",
    "model_result_decoded": [
        {
            "calculate_molecular_weight": {
                "compound": "C6H12O6",
                "to_unit": "gram/mole"
            }
        }
    ],
    "possible_answer": [
        {
            "calculate_molecular_weight": {
                "compound": [
                    "C6H12O6"
                ],
                "to_unit": [
                    "grams/mole",
                    "g/mol"
                ]
            }
        }
    ]
}
{
    "id": 62,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'height': 165. Expected one of [70]."
    ],
    "error_type": "value_error:others",
    "prompt": {
        "id": "simple_61",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Predict whether a person with weight 150lbs and height 5ft 10in who is lightly active will get type 2 diabetes."
                }
            ]
        ],
        "function": [
            {
                "name": "diabetes_prediction",
                "description": "Predict the likelihood of diabetes type 2 based on a person's weight and height.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "weight": {
                            "type": "integer",
                            "description": "Weight of the person in lbs."
                        },
                        "height": {
                            "type": "integer",
                            "description": "Height of the person in inches."
                        },
                        "activity_level": {
                            "type": "string",
                            "enum": [
                                "sedentary",
                                "lightly active",
                                "moderately active",
                                "very active",
                                "extra active"
                            ],
                            "description": "Physical activity level of the person."
                        }
                    },
                    "required": [
                        "weight",
                        "height",
                        "activity_level"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"diabetes_prediction\", \"arguments\": {\"weight\": 150, \"height\": 165, \"activity_level\": \"lightly active\"}}]\n",
    "model_result_decoded": [
        {
            "diabetes_prediction": {
                "weight": 150,
                "height": 165,
                "activity_level": "lightly active"
            }
        }
    ],
    "possible_answer": [
        {
            "diabetes_prediction": {
                "weight": [
                    150
                ],
                "height": [
                    70
                ],
                "activity_level": [
                    "lightly active"
                ]
            }
        }
    ]
}
{
    "id": 66,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'land_area': 85000000. Expected one of [8500000]."
    ],
    "error_type": "value_error:others",
    "prompt": {
        "id": "simple_65",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Calculate the Population Density for Brazil in 2022 if the population is 213 million and the land area is 8.5 million square kilometers."
                }
            ]
        ],
        "function": [
            {
                "name": "calculate_density",
                "description": "Calculate the population density of a specific country in a specific year.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "country": {
                            "type": "string",
                            "description": "The country for which the density needs to be calculated."
                        },
                        "year": {
                            "type": "string",
                            "description": "The year in which the density is to be calculated."
                        },
                        "population": {
                            "type": "integer",
                            "description": "The population of the country."
                        },
                        "land_area": {
                            "type": "integer",
                            "description": "The land area of the country in square kilometers."
                        }
                    },
                    "required": [
                        "country",
                        "year",
                        "population",
                        "land_area"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"calculate_density\", \"arguments\": {\"country\": \"Brazil\", \"year\": \"2022\", \"population\": 213000000, \"land_area\": 85000000}}]\n",
    "model_result_decoded": [
        {
            "calculate_density": {
                "country": "Brazil",
                "year": "2022",
                "population": 213000000,
                "land_area": 85000000
            }
        }
    ],
    "possible_answer": [
        {
            "calculate_density": {
                "country": [
                    "Brazil"
                ],
                "year": [
                    "2022"
                ],
                "population": [
                    213000000
                ],
                "land_area": [
                    8500000
                ]
            }
        }
    ]
}
{
    "id": 70,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'location': 'Mississippi'. Expected one of ['Mississippi river']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_69",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find out the population and species of turtles in Mississippi river in 2020."
                }
            ]
        ],
        "function": [
            {
                "name": "ecology.get_turtle_population",
                "description": "Get the population and species of turtles in a specific location.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "The name of the location."
                        },
                        "year": {
                            "type": "integer",
                            "description": "The year of the data requested. Default is 2001."
                        },
                        "species": {
                            "type": "boolean",
                            "description": "Whether to include species information. Default is false."
                        }
                    },
                    "required": [
                        "location"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"ecology.get_turtle_population\", \"arguments\": {\"location\": \"Mississippi\", \"year\": 2020, \"species\": false}}]\n",
    "model_result_decoded": [
        {
            "ecology.get_turtle_population": {
                "location": "Mississippi",
                "year": 2020,
                "species": false
            }
        }
    ],
    "possible_answer": [
        {
            "ecology.get_turtle_population": {
                "location": [
                    "Mississippi river"
                ],
                "year": [
                    2020
                ],
                "species": [
                    true
                ]
            }
        }
    ]
}
{
    "id": 72,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Unexpected parameter: 'description'."
    ],
    "error_type": "simple_function_checker:unexpected_param",
    "prompt": {
        "id": "simple_71",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Generate a DNA sequence with 100 bases including more G (Guanine) and C (Cytosine)."
                }
            ]
        ],
        "function": [
            {
                "name": "generate_DNA_sequence",
                "description": "Generate a random DNA sequence with a specific length and nucleotide preference.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "length": {
                            "type": "integer",
                            "description": "The length of the DNA sequence to be generated."
                        },
                        "preferences": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "A",
                                    "T",
                                    "C",
                                    "G"
                                ]
                            },
                            "description": "Preferred nucleotides to include more frequently in the DNA sequence."
                        }
                    },
                    "required": [
                        "length",
                        "preferences"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"generate_DNA_sequence\", \"arguments\": {\"length\": 100, \"preferences\": [\"G\", \"C\"], \"description\": \"Include more G and C in the DNA sequence\"}}]\n",
    "model_result_decoded": [
        {
            "generate_DNA_sequence": {
                "length": 100,
                "preferences": [
                    "G",
                    "C"
                ],
                "description": "Include more G and C in the DNA sequence"
            }
        }
    ],
    "possible_answer": [
        {
            "generate_DNA_sequence": {
                "length": [
                    100
                ],
                "preferences": [
                    [
                        "G",
                        "C"
                    ],
                    [
                        "C",
                        "G"
                    ]
                ]
            }
        }
    ]
}
{
    "id": 78,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'location': 'Los Angeles'. Expected one of ['Los Angeles, CA']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_77",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find a nearby restaurant that serves vegan food in Los Angeles."
                }
            ]
        ],
        "function": [
            {
                "name": "restaurant.find_nearby",
                "description": "Locate nearby restaurants based on specific dietary preferences.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "The city and state, e.g. Los Angeles, CA"
                        },
                        "dietary_preference": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Vegan",
                                    "Vegetarian",
                                    "Gluten-free",
                                    "Dairy-free",
                                    "Nut-free"
                                ]
                            },
                            "description": "Dietary preference. Default is empty list."
                        }
                    },
                    "required": [
                        "location"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"restaurant.find_nearby\", \"arguments\": {\"location\": \"Los Angeles\", \"dietary_preference\": [\"Vegan\"]}}]\n",
    "model_result_decoded": [
        {
            "restaurant.find_nearby": {
                "location": "Los Angeles",
                "dietary_preference": [
                    "Vegan"
                ]
            }
        }
    ],
    "possible_answer": [
        {
            "restaurant.find_nearby": {
                "location": [
                    "Los Angeles, CA"
                ],
                "dietary_preference": [
                    [
                        "Vegan"
                    ]
                ]
            }
        }
    ]
}
{
    "id": 83,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Nested type checking failed for parameter 'numbers'. Expected outer type array with inner type <class 'float'>. Parameter value: [12, 15, 18, 20, 21, 26, 30]."
    ],
    "error_type": "type_error:nested",
    "prompt": {
        "id": "simple_82",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30]."
                }
            ]
        ],
        "function": [
            {
                "name": "calculate_average",
                "description": "Calculates the average of a list of numbers.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "numbers": {
                            "type": "array",
                            "items": {
                                "type": "float"
                            },
                            "description": "The list of numbers to calculate the average of."
                        }
                    },
                    "required": [
                        "numbers"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"calculate_average\", \"arguments\": {\"numbers\": [12, 15, 18, 20, 21, 26, 30]}}]\n",
    "model_result_decoded": [
        {
            "calculate_average": {
                "numbers": [
                    12,
                    15,
                    18,
                    20,
                    21,
                    26,
                    30
                ]
            }
        }
    ],
    "possible_answer": [
        {
            "calculate_average": {
                "numbers": [
                    [
                        12.0,
                        15.0,
                        18.0,
                        20.0,
                        21.0,
                        26.0,
                        30.0
                    ]
                ]
            }
        }
    ]
}
{
    "id": 84,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid syntax. Failed to decode AST. Expecting value: line 1 column 57 (char 56)"
    ],
    "error_type": "ast_decoder:decoder_failed",
    "prompt": {
        "id": "simple_83",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Calculate the distance between two GPS coordinates (33.4484 N, 112.0740 W) and (34.0522 N, 118.2437 W) in miles."
                }
            ]
        ],
        "function": [
            {
                "name": "calculate_distance",
                "description": "Calculate the distance between two GPS coordinates.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "coord1": {
                            "type": "tuple",
                            "description": "The first coordinate as (latitude, longitude).",
                            "items": {
                                "type": "float"
                            }
                        },
                        "coord2": {
                            "type": "tuple",
                            "description": "The second coordinate as (latitude, longitude).",
                            "items": {
                                "type": "float"
                            }
                        },
                        "unit": {
                            "type": "string",
                            "description": "The unit of distance. Options: 'miles', 'kilometers'."
                        }
                    },
                    "required": [
                        "coord1",
                        "coord2",
                        "unit"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"calculate_distance\", \"arguments\": {\"coord1\": (-112.074, 33.4484), \"coord2\": (-118.2437, 34.0522), \"unit\": \"miles\"}}]\n",
    "possible_answer": [
        {
            "calculate_distance": {
                "coord1": [
                    [
                        33.4484,
                        -112.074
                    ]
                ],
                "coord2": [
                    [
                        34.0522,
                        -118.2437
                    ]
                ],
                "unit": [
                    "miles"
                ]
            }
        }
    ]
}
{
    "id": 88,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Nested type checking failed for parameter 'list'. Expected outer type array with inner type <class 'float'>. Parameter value: [5, 3, 4, 1, 2]."
    ],
    "error_type": "type_error:nested",
    "prompt": {
        "id": "simple_87",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Sort the list [5, 3, 4, 1, 2] in ascending order."
                }
            ]
        ],
        "function": [
            {
                "name": "array_sort",
                "description": "Sorts a given list in ascending or descending order.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "list": {
                            "type": "array",
                            "items": {
                                "type": "float"
                            },
                            "description": "The list of numbers to be sorted."
                        },
                        "order": {
                            "type": "string",
                            "enum": [
                                "ascending",
                                "descending"
                            ],
                            "description": "Order of sorting."
                        }
                    },
                    "required": [
                        "list",
                        "order"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"array_sort\", \"arguments\": {\"list\": [5, 3, 4, 1, 2], \"order\": \"ascending\"}}]\n",
    "model_result_decoded": [
        {
            "array_sort": {
                "list": [
                    5,
                    3,
                    4,
                    1,
                    2
                ],
                "order": "ascending"
            }
        }
    ],
    "possible_answer": [
        {
            "array_sort": {
                "list": [
                    [
                        5.0,
                        3.0,
                        4.0,
                        1.0,
                        2.0
                    ]
                ],
                "order": [
                    "ascending"
                ]
            }
        }
    ]
}
{
    "id": 90,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid syntax. Failed to decode AST. Expecting ',' delimiter: line 1 column 175 (char 174)"
    ],
    "error_type": "ast_decoder:decoder_failed",
    "prompt": {
        "id": "simple_89",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Fetch all records for students studying Science in 'Bluebird High School' from the StudentDB."
                }
            ]
        ],
        "function": [
            {
                "name": "db_fetch_records",
                "description": "Fetch records from a specified database table based on certain conditions.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "database_name": {
                            "type": "string",
                            "description": "The name of the database."
                        },
                        "table_name": {
                            "type": "string",
                            "description": "The name of the table from which records need to be fetched."
                        },
                        "conditions": {
                            "type": "dict",
                            "properties": {
                                "department": {
                                    "type": "string",
                                    "description": "The name of the department of students."
                                },
                                "school": {
                                    "type": "string",
                                    "description": "The name of the school students are enrolled in."
                                }
                            },
                            "description": "The conditions based on which records are to be fetched."
                        },
                        "fetch_limit": {
                            "type": "integer",
                            "description": "Limits the number of records to be fetched. Default is 0, which means no limit."
                        }
                    },
                    "required": [
                        "database_name",
                        "table_name",
                        "conditions"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"db_fetch_records\", \"arguments\": {\"database_name\": \"StudentDB\", \"table_name\": \"students\", \"conditions\": {\"department\": \"Science\", \"school\": \"Bluebird High School\"}}]\n",
    "possible_answer": [
        {
            "db_fetch_records": {
                "database_name": [
                    "StudentDB"
                ],
                "table_name": [
                    "students"
                ],
                "conditions": [
                    {
                        "department": [
                            "Science"
                        ],
                        "school": [
                            "Bluebird High School",
                            "Bluebird HS"
                        ]
                    }
                ],
                "fetch_limit": [
                    "",
                    0
                ]
            }
        }
    ]
}
{
    "id": 92,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'condition': 'sundays'. Expected one of ['open on Sundays', 'opens on Sundays']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_91",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Get the highest rated sushi restaurant in Boston, that opens on Sundays."
                }
            ]
        ],
        "function": [
            {
                "name": "get_restaurant",
                "description": "Retrieve highest rated restaurant given cuisine, location, and a condition.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "cuisine": {
                            "type": "string",
                            "description": "Cuisine of the restaurant."
                        },
                        "location": {
                            "type": "string",
                            "description": "City where restaurant is located."
                        },
                        "condition": {
                            "type": "string",
                            "description": "Condition to be met by the restaurant (e.g., operating days, amenities, etc.)"
                        }
                    },
                    "required": [
                        "cuisine",
                        "location",
                        "condition"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"get_restaurant\", \"arguments\": {\"cuisine\": \"sushi\", \"location\": \"Boston\", \"condition\": \"sundays\"}}]\n",
    "model_result_decoded": [
        {
            "get_restaurant": {
                "cuisine": "sushi",
                "location": "Boston",
                "condition": "sundays"
            }
        }
    ],
    "possible_answer": [
        {
            "get_restaurant": {
                "cuisine": [
                    "sushi"
                ],
                "location": [
                    "Boston"
                ],
                "condition": [
                    "open on Sundays",
                    "opens on Sundays"
                ]
            }
        }
    ]
}
{
    "id": 95,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid syntax. Failed to decode AST. Expecting ',' delimiter: line 1 column 129 (char 128)"
    ],
    "error_type": "ast_decoder:decoder_failed",
    "prompt": {
        "id": "simple_94",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Update my customer information with user id 43523 'name':'John Doe', 'email':'johndoe@email.com' in the database."
                }
            ]
        ],
        "function": [
            {
                "name": "update_user_info",
                "description": "Update user information in the database.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "user_id": {
                            "type": "integer",
                            "description": "The user ID of the customer."
                        },
                        "update_info": {
                            "type": "dict",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "The customer's updated name."
                                },
                                "email": {
                                    "type": "string",
                                    "description": "The customer's updated email."
                                }
                            },
                            "description": "The new information to update."
                        },
                        "database": {
                            "type": "string",
                            "description": "The database where the user's information is stored.",
                            "default": "CustomerInfo"
                        }
                    },
                    "required": [
                        "user_id",
                        "update_info"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"update_user_info\", \"arguments\": {\"user_id\": 43523, \"update_info\": {\"name\": \"John Doe\", \"email\": \"johndoe@email.com\"}}]\n",
    "possible_answer": [
        {
            "update_user_info": {
                "user_id": [
                    43523
                ],
                "update_info": [
                    {
                        "name": [
                            "John Doe"
                        ],
                        "email": [
                            "johndoe@email.com"
                        ]
                    }
                ],
                "database": [
                    "CustomerInfo",
                    ""
                ]
            }
        }
    ]
}
{
    "id": 97,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid syntax. Failed to decode AST. Expecting ',' delimiter: line 1 column 182 (char 181)"
    ],
    "error_type": "ast_decoder:decoder_failed",
    "prompt": {
        "id": "simple_96",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find records in database in user table where age is greater than 25 and job is 'engineer'."
                }
            ]
        ],
        "function": [
            {
                "name": "database.query",
                "description": "Query the database based on certain conditions.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "table": {
                            "type": "string",
                            "description": "Name of the table to query."
                        },
                        "conditions": {
                            "type": "array",
                            "items": {
                                "type": "dict",
                                "properties": {
                                    "field": {
                                        "type": "string",
                                        "description": "The field to apply the condition."
                                    },
                                    "operation": {
                                        "type": "string",
                                        "description": "The operation to be performed.",
                                        "enum": [
                                            "<",
                                            ">",
                                            "=",
                                            ">=",
                                            "<="
                                        ]
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "The value to be compared."
                                    }
                                },
                                "required": [
                                    "field",
                                    "operation",
                                    "value"
                                ]
                            },
                            "description": "Conditions for the query."
                        }
                    },
                    "required": [
                        "table",
                        "conditions"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"database.query\", \"arguments\": {\"table\": \"user\", \"conditions\": [{\"field\": \"age\", \"operation\": \">\", \"value\": \"25\"}, {\"field\": \"job\", \"operation\": \"in\", \"value\": \"engineer\"}}]\n",
    "possible_answer": [
        {
            "database.query": {
                "table": [
                    "user"
                ],
                "conditions": [
                    [
                        {
                            "field": [
                                "age"
                            ],
                            "operation": [
                                ">"
                            ],
                            "value": [
                                "25"
                            ]
                        },
                        {
                            "field": [
                                "job"
                            ],
                            "operation": [
                                "="
                            ],
                            "value": [
                                "engineer"
                            ]
                        }
                    ]
                ]
            }
        }
    ]
}
{
    "id": 100,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid syntax. Failed to decode AST. Expecting ',' delimiter: line 1 column 76 (char 75)"
    ],
    "error_type": "ast_decoder:decoder_failed",
    "prompt": {
        "id": "simple_99",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Plot a sine wave from 0 to 2 pi with a frequency of 5 Hz."
                }
            ]
        ],
        "function": [
            {
                "name": "plot_sine_wave",
                "description": "Plot a sine wave for a given frequency in a given range.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "start_range": {
                            "type": "float",
                            "description": "Start of the range in radians. Four decimal places."
                        },
                        "end_range": {
                            "type": "float",
                            "description": "End of the range in radians. Four decimal places."
                        },
                        "frequency": {
                            "type": "integer",
                            "description": "Frequency of the sine wave in Hz."
                        },
                        "amplitude": {
                            "type": "integer",
                            "description": "Amplitude of the sine wave. Default is 1."
                        },
                        "phase_shift": {
                            "type": "integer",
                            "description": "Phase shift of the sine wave in radians. Default is 0."
                        }
                    },
                    "required": [
                        "start_range",
                        "end_range",
                        "frequency"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"plot_sine_wave\", \"arguments\": {\"start_range\": 0, \"end_range\": 2 * pi, \"frequency\": 5}}]\n",
    "possible_answer": [
        {
            "plot_sine_wave": {
                "start_range": [
                    0.0
                ],
                "end_range": [
                    6.2832
                ],
                "frequency": [
                    5
                ],
                "amplitude": [
                    1,
                    ""
                ],
                "phase_shift": [
                    0,
                    ""
                ]
            }
        }
    ]
}
{
    "id": 104,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Nested type checking failed for parameter 'polynomial'. Expected outer type array with inner type <class 'float'>. Parameter value: [3, 2, -4]."
    ],
    "error_type": "type_error:nested",
    "prompt": {
        "id": "simple_103",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2."
                }
            ]
        ],
        "function": [
            {
                "name": "mathematics.calculate_area_under_curve",
                "description": "Calculate the area under the curve for a given polynomial function within a specified interval.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "polynomial": {
                            "type": "array",
                            "items": {
                                "type": "float"
                            },
                            "description": "The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term."
                        },
                        "limits": {
                            "type": "array",
                            "items": {
                                "type": "float"
                            },
                            "description": "A list of two numbers specifying the lower and upper limit for the integration interval."
                        }
                    },
                    "required": [
                        "polynomial",
                        "limits"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"mathematics.calculate_area_under_curve\", \"arguments\": {\"polynomial\": [3, 2, -4], \"limits\": [-1, 2]}}]\n",
    "model_result_decoded": [
        {
            "mathematics.calculate_area_under_curve": {
                "polynomial": [
                    3,
                    2,
                    -4
                ],
                "limits": [
                    -1,
                    2
                ]
            }
        }
    ],
    "possible_answer": [
        {
            "mathematics.calculate_area_under_curve": {
                "polynomial": [
                    [
                        3.0,
                        2.0,
                        -4.0
                    ]
                ],
                "limits": [
                    [
                        -1.0,
                        2.0
                    ]
                ]
            }
        }
    ]
}
{
    "id": 110,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid syntax. Failed to decode AST. Expecting value: line 1 column 93 (char 92)"
    ],
    "error_type": "ast_decoder:decoder_failed",
    "prompt": {
        "id": "simple_109",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Generate a random forest model with 100 trees and a depth of 5 on the provided data my_data."
                }
            ]
        ],
        "function": [
            {
                "name": "random_forest.train",
                "description": "Train a Random Forest Model on given data",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "n_estimators": {
                            "type": "integer",
                            "description": "The number of trees in the forest."
                        },
                        "max_depth": {
                            "type": "integer",
                            "description": "The maximum depth of the tree."
                        },
                        "data": {
                            "type": "any",
                            "description": "The training data for the model."
                        }
                    },
                    "required": [
                        "n_estimators",
                        "max_depth",
                        "data"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"random_forest.train\", \"arguments\": {\"n_estimators\": 100, \"max_depth\": 5, \"data\": my_data}}]\n",
    "possible_answer": [
        {
            "random_forest.train": {
                "n_estimators": [
                    100
                ],
                "max_depth": [
                    5
                ],
                "data": [
                    "my_data"
                ]
            }
        }
    ]
}
{
    "id": 111,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Missing required parameter: 'location'."
    ],
    "error_type": "simple_function_checker:missing_required",
    "prompt": {
        "id": "simple_110",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Predict the price of the house in San Francisco with 3 bedrooms, 2 bathrooms and area of 1800 square feet."
                }
            ]
        ],
        "function": [
            {
                "name": "predict_house_price",
                "description": "Predict the price of a house in a given area based on number of bedrooms, bathrooms and area.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "bedrooms": {
                            "type": "integer",
                            "description": "The number of bedrooms in the house."
                        },
                        "bathrooms": {
                            "type": "integer",
                            "description": "The number of bathrooms in the house."
                        },
                        "area": {
                            "type": "integer",
                            "description": "The area of the house in square feet."
                        },
                        "location": {
                            "type": "string",
                            "description": "The location of the house in the format of city name."
                        }
                    },
                    "required": [
                        "bedrooms",
                        "bathrooms",
                        "area",
                        "location"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"predict_house_price\", \"arguments\": {\"bedrooms\": 3, \"bathrooms\": 2, \"area\": 1800}}]\n",
    "model_result_decoded": [
        {
            "predict_house_price": {
                "bedrooms": 3,
                "bathrooms": 2,
                "area": 1800
            }
        }
    ],
    "possible_answer": [
        {
            "predict_house_price": {
                "bedrooms": [
                    3
                ],
                "bathrooms": [
                    2
                ],
                "area": [
                    1800
                ],
                "location": [
                    "San Francisco",
                    "San Francisco, CA"
                ]
            }
        }
    ]
}
{
    "id": 113,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'round_to': 0. Expected one of ['', 2]."
    ],
    "error_type": "value_error:others",
    "prompt": {
        "id": "simple_112",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Calculate the probability of drawing a king from a deck of cards."
                }
            ]
        ],
        "function": [
            {
                "name": "calculate_probability",
                "description": "Calculate the probability of an event.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "total_outcomes": {
                            "type": "integer",
                            "description": "Total number of possible outcomes."
                        },
                        "favorable_outcomes": {
                            "type": "integer",
                            "description": "Number of outcomes considered as 'successful'."
                        },
                        "round_to": {
                            "type": "integer",
                            "description": "Number of decimal places to round the result to.",
                            "default": 2
                        }
                    },
                    "required": [
                        "total_outcomes",
                        "favorable_outcomes"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"calculate_probability\", \"arguments\": {\"total_outcomes\": 52, \"favorable_outcomes\": 4, \"round_to\": 0}}]\n",
    "model_result_decoded": [
        {
            "calculate_probability": {
                "total_outcomes": 52,
                "favorable_outcomes": 4,
                "round_to": 0
            }
        }
    ],
    "possible_answer": [
        {
            "calculate_probability": {
                "total_outcomes": [
                    52
                ],
                "favorable_outcomes": [
                    4
                ],
                "round_to": [
                    "",
                    2
                ]
            }
        }
    ]
}
{
    "id": 117,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'event_outcomes': 1. Expected one of [4]."
    ],
    "error_type": "value_error:others",
    "prompt": {
        "id": "simple_116",
        "question": [
            [
                {
                    "role": "user",
                    "content": "What's the probability of drawing a king from a well shuffled standard deck of 52 cards?"
                }
            ]
        ],
        "function": [
            {
                "name": "probabilities.calculate_single",
                "description": "Calculate the probability of an event.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "total_outcomes": {
                            "type": "integer",
                            "description": "The total number of outcomes."
                        },
                        "event_outcomes": {
                            "type": "integer",
                            "description": "The number of outcomes where the event occurs."
                        },
                        "round": {
                            "type": "integer",
                            "description": "Round the answer to a specified number of decimal places. Defaults to 2."
                        }
                    },
                    "required": [
                        "total_outcomes",
                        "event_outcomes"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"probabilities.calculate_single\", \"arguments\": {\"total_outcomes\": 52, \"event_outcomes\": 1, \"round\": 2}}]\n",
    "model_result_decoded": [
        {
            "probabilities.calculate_single": {
                "total_outcomes": 52,
                "event_outcomes": 1,
                "round": 2
            }
        }
    ],
    "possible_answer": [
        {
            "probabilities.calculate_single": {
                "total_outcomes": [
                    52
                ],
                "event_outcomes": [
                    4
                ],
                "round": [
                    2,
                    ""
                ]
            }
        }
    ]
}
{
    "id": 127,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'dependent_variable': 'price'. Expected one of ['car_price']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_126",
        "question": [
            [
                {
                    "role": "user",
                    "content": "What is the coefficient of determination (R-squared) for a model using engine size and fuel economy variables to predict car_price with a dataset in path C:/data/cars.csv?"
                }
            ]
        ],
        "function": [
            {
                "name": "linear_regression.get_r_squared",
                "description": "Calculate the coefficient of determination of a regression model.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "dataset_path": {
                            "type": "string",
                            "description": "Path to the CSV dataset file."
                        },
                        "independent_variables": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "The independent variables to use in the regression model."
                        },
                        "dependent_variable": {
                            "type": "string",
                            "description": "The dependent variable to predict in the regression model."
                        }
                    },
                    "required": [
                        "dataset_path",
                        "independent_variables",
                        "dependent_variable"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"linear_regression.get_r_squared\", \"arguments\": {\"dataset_path\": \"C:/data/cars.csv\", \"independent_variables\": [\"engine_size\", \"fuel_economy\"], \"dependent_variable\": \"price\"}}]\n",
    "model_result_decoded": [
        {
            "linear_regression.get_r_squared": {
                "dataset_path": "C:/data/cars.csv",
                "independent_variables": [
                    "engine_size",
                    "fuel_economy"
                ],
                "dependent_variable": "price"
            }
        }
    ],
    "possible_answer": [
        {
            "linear_regression.get_r_squared": {
                "dataset_path": [
                    "C:/data/cars.csv"
                ],
                "independent_variables": [
                    [
                        "engine_size",
                        "fuel_economy"
                    ]
                ],
                "dependent_variable": [
                    "car_price"
                ]
            }
        }
    ]
}
{
    "id": 129,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'total_payout': 500000000. Expected one of [50000000]."
    ],
    "error_type": "value_error:others",
    "prompt": {
        "id": "simple_128",
        "question": [
            [
                {
                    "role": "user",
                    "content": "What's the quarterly dividend per share of a company with 100 million outstanding shares and total dividend payout of 50 million USD?"
                }
            ]
        ],
        "function": [
            {
                "name": "finance.calculate_quarterly_dividend_per_share",
                "description": "Calculate quarterly dividend per share for a company given total dividend payout and outstanding shares",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "total_payout": {
                            "type": "integer",
                            "description": "The total amount of dividends paid out in USD"
                        },
                        "outstanding_shares": {
                            "type": "integer",
                            "description": "Total number of outstanding shares"
                        }
                    },
                    "required": [
                        "total_payout",
                        "outstanding_shares"
                    ],
                    "optional": []
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"finance.calculate_quarterly_dividend_per_share\", \"arguments\": {\"total_payout\": 500000000, \"outstanding_shares\": 100000000}}]\n",
    "model_result_decoded": [
        {
            "finance.calculate_quarterly_dividend_per_share": {
                "total_payout": 500000000,
                "outstanding_shares": 100000000
            }
        }
    ],
    "possible_answer": [
        {
            "finance.calculate_quarterly_dividend_per_share": {
                "total_payout": [
                    50000000
                ],
                "outstanding_shares": [
                    100000000
                ]
            }
        }
    ]
}
{
    "id": 131,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'years': [1, 2, 3, 4, 5, 6]. Expected one of ['', []]."
    ],
    "error_type": "value_error:list/tuple",
    "prompt": {
        "id": "simple_130",
        "question": [
            [
                {
                    "role": "user",
                    "content": "What's the NPV (Net Present Value) of a series of cash flows: [-50000, 10000, 15000, 20000, 25000, 30000] discounted at 8% annually?"
                }
            ]
        ],
        "function": [
            {
                "name": "finance_calculator.npv",
                "description": "Calculate the Net Present Value (NPV) for a series of cash flows discounted at a certain interest rate.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "cash_flows": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "description": "A list of cash flows."
                        },
                        "discount_rate": {
                            "type": "float",
                            "description": "The annual interest rate used to discount the cash flows."
                        },
                        "years": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "description": "A list of years when the cash flow occurs. Default is empty array."
                        }
                    },
                    "required": [
                        "cash_flows",
                        "discount_rate"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"finance_calculator.npv\", \"arguments\": {\"cash_flows\": [-50000, 10000, 15000, 20000, 25000, 30000], \"discount_rate\": 0.08, \"years\": [1, 2, 3, 4, 5, 6]}}]\n",
    "model_result_decoded": [
        {
            "finance_calculator.npv": {
                "cash_flows": [
                    -50000,
                    10000,
                    15000,
                    20000,
                    25000,
                    30000
                ],
                "discount_rate": 0.08,
                "years": [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ]
            }
        }
    ],
    "possible_answer": [
        {
            "finance_calculator.npv": {
                "cash_flows": [
                    [
                        -50000,
                        10000,
                        15000,
                        20000,
                        25000,
                        30000
                    ]
                ],
                "discount_rate": [
                    0.08
                ],
                "years": [
                    "",
                    []
                ]
            }
        }
    ]
}
{
    "id": 137,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'annual_rate': 0.05. Expected one of [5]."
    ],
    "error_type": "value_error:others",
    "prompt": {
        "id": "simple_136",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find the compound interest for an investment of $10000 with an annual interest rate of 5% compounded monthly for 5 years."
                }
            ]
        ],
        "function": [
            {
                "name": "compound_interest",
                "description": "Calculate compound interest for a certain time period.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "principal": {
                            "type": "integer",
                            "description": "The initial amount of money that was invested or loaned out."
                        },
                        "annual_rate": {
                            "type": "float",
                            "description": "The interest rate for a year as a percentage."
                        },
                        "compounding_freq": {
                            "type": "string",
                            "enum": [
                                "monthly",
                                "quarterly",
                                "annually"
                            ],
                            "description": "The number of times that interest is compounded per unit period."
                        },
                        "time_in_years": {
                            "type": "integer",
                            "description": "The time the money is invested for in years."
                        }
                    },
                    "required": [
                        "principal",
                        "annual_rate",
                        "compounding_freq",
                        "time_in_years"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"compound_interest\", \"arguments\": {\"principal\": 10000, \"annual_rate\": 0.05, \"compounding_freq\": \"monthly\", \"time_in_years\": 5}}]\n",
    "model_result_decoded": [
        {
            "compound_interest": {
                "principal": 10000,
                "annual_rate": 0.05,
                "compounding_freq": "monthly",
                "time_in_years": 5
            }
        }
    ],
    "possible_answer": [
        {
            "compound_interest": {
                "principal": [
                    10000
                ],
                "annual_rate": [
                    5
                ],
                "compounding_freq": [
                    "monthly"
                ],
                "time_in_years": [
                    5
                ]
            }
        }
    ]
}
{
    "id": 139,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid syntax. Failed to decode AST. Expecting ',' delimiter: line 1 column 166 (char 165)"
    ],
    "error_type": "ast_decoder:decoder_failed",
    "prompt": {
        "id": "simple_138",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Calculate the future value of my portfolio if I invest $5000 in stock 'X' with an expected annual return of 5% for 7 years."
                }
            ]
        ],
        "function": [
            {
                "name": "portfolio_future_value",
                "description": "Calculate the future value of an investment in a specific stock based on the invested amount, expected annual return and number of years.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "stock": {
                            "type": "string",
                            "description": "The ticker symbol of the stock."
                        },
                        "invested_amount": {
                            "type": "integer",
                            "description": "The invested amount in USD."
                        },
                        "expected_annual_return": {
                            "type": "float",
                            "description": "The expected annual return on investment as a decimal. E.g. 5% = 0.05"
                        },
                        "years": {
                            "type": "integer",
                            "description": "The number of years for which the investment is made."
                        }
                    },
                    "required": [
                        "stock",
                        "invested_amount",
                        "expected_annual_return",
                        "years"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"portfolio_future_value\", \"arguments\": {\"type\": \"stock\", \"properties\": {\"stock\": \"X\", \"invested_amount\": 5000, \"expected_annual_return\": 0.05, \"years\": 7}}]\n",
    "possible_answer": [
        {
            "portfolio_future_value": {
                "stock": [
                    "X"
                ],
                "invested_amount": [
                    5000
                ],
                "expected_annual_return": [
                    0.05
                ],
                "years": [
                    7
                ]
            }
        }
    ]
}
{
    "id": 152,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'top_n': 5. Expected one of [1]."
    ],
    "error_type": "value_error:others",
    "prompt": {
        "id": "simple_151",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find the highest grossing bank in the U.S for year 2020."
                }
            ]
        ],
        "function": [
            {
                "name": "highest_grossing_banks",
                "description": "Retrieve the highest grossing banks in a specified country and year.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "country": {
                            "type": "string",
                            "description": "The country to get the data from."
                        },
                        "year": {
                            "type": "integer",
                            "description": "The year to get the data from."
                        },
                        "top_n": {
                            "type": "integer",
                            "description": "Top n banks in terms of grossing. Default is 5"
                        }
                    },
                    "required": [
                        "country",
                        "year"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"highest_grossing_banks\", \"arguments\": {\"country\": \"US\", \"year\": 2020, \"top_n\": 5}}]\n",
    "model_result_decoded": [
        {
            "highest_grossing_banks": {
                "country": "US",
                "year": 2020,
                "top_n": 5
            }
        }
    ],
    "possible_answer": [
        {
            "highest_grossing_banks": {
                "country": [
                    "U.S",
                    "United States",
                    "USA",
                    "U.S."
                ],
                "year": [
                    2020
                ],
                "top_n": [
                    1
                ]
            }
        }
    ]
}
{
    "id": 157,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Optional parameter 'details' not provided and not marked as optional."
    ],
    "error_type": "simple_function_checker:missing_optional",
    "prompt": {
        "id": "simple_156",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Look up details of a felony crime record for case number CA123456 in San Diego County"
                }
            ]
        ],
        "function": [
            {
                "name": "crime_record.get_record",
                "description": "Retrieve detailed felony crime records using a specific case number and location.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "case_number": {
                            "type": "string",
                            "description": "The case number related to the crime."
                        },
                        "county": {
                            "type": "string",
                            "description": "The county in which the crime occurred."
                        },
                        "details": {
                            "type": "boolean",
                            "description": "To get a detailed report, set as true. Defaults to false."
                        }
                    },
                    "required": [
                        "case_number",
                        "county"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"crime_record.get_record\", \"arguments\": {\"case_number\": \"CA123456\", \"county\": \"San Diego\"}}]\n",
    "model_result_decoded": [
        {
            "crime_record.get_record": {
                "case_number": "CA123456",
                "county": "San Diego"
            }
        }
    ],
    "possible_answer": [
        {
            "crime_record.get_record": {
                "case_number": [
                    "CA123456"
                ],
                "county": [
                    "San Diego",
                    "San Diego County"
                ],
                "details": [
                    true
                ]
            }
        }
    ]
}
{
    "id": 159,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'location': 'New York'. Expected one of ['New York, NY']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_158",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find the information of criminal cases of Mr. X in New York between 2012 and 2015."
                }
            ]
        ],
        "function": [
            {
                "name": "get_criminal_records",
                "description": "Retrieve the criminal records of a specific person in a specific area during a certain time period.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "The name of the person."
                        },
                        "location": {
                            "type": "string",
                            "description": "The city and state, e.g. New York, NY"
                        },
                        "from_year": {
                            "type": "integer",
                            "description": "The start year of the time frame."
                        },
                        "to_year": {
                            "type": "integer",
                            "description": "The end year of the time frame."
                        }
                    },
                    "required": [
                        "name",
                        "location",
                        "from_year",
                        "to_year"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"get_criminal_records\", \"arguments\": {\"name\": \"Mr. X\", \"location\": \"New York\", \"from_year\": 2012, \"to_year\": 2015}}]\n",
    "model_result_decoded": [
        {
            "get_criminal_records": {
                "name": "Mr. X",
                "location": "New York",
                "from_year": 2012,
                "to_year": 2015
            }
        }
    ],
    "possible_answer": [
        {
            "get_criminal_records": {
                "name": [
                    "Mr. X"
                ],
                "location": [
                    "New York, NY"
                ],
                "from_year": [
                    2012
                ],
                "to_year": [
                    2015
                ]
            }
        }
    ]
}
{
    "id": 160,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'act_name': 'Criminal Law Amendment Act of 2013'. Expected one of ['Criminal Law Amendment Act', 'Criminal Law Amendment']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_159",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Give me the details of Criminal Law Amendment Act of 2013."
                }
            ]
        ],
        "function": [
            {
                "name": "get_act_details",
                "description": "Retrieve the details of a particular legal act based on its name and year of amendment if any.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "act_name": {
                            "type": "string",
                            "description": "The name of the act."
                        },
                        "amendment_year": {
                            "type": "integer",
                            "description": "Year of amendment if any. If not provided, the latest amendment year will be considered."
                        }
                    },
                    "required": [
                        "act_name",
                        "amendment_year"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"get_act_details\", \"arguments\": {\"act_name\": \"Criminal Law Amendment Act of 2013\", \"amendment_year\": 2013}}]\n",
    "model_result_decoded": [
        {
            "get_act_details": {
                "act_name": "Criminal Law Amendment Act of 2013",
                "amendment_year": 2013
            }
        }
    ],
    "possible_answer": [
        {
            "get_act_details": {
                "act_name": [
                    "Criminal Law Amendment Act",
                    "Criminal Law Amendment"
                ],
                "amendment_year": [
                    2013
                ]
            }
        }
    ]
}
{
    "id": 164,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Optional parameter 'include_owner' not provided and not marked as optional."
    ],
    "error_type": "simple_function_checker:missing_optional",
    "prompt": {
        "id": "simple_163",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Provide me with the property records of my house located at 123 main street, with parcel number 1234567890 in Santa Clara county. Include owners information in the response."
                }
            ]
        ],
        "function": [
            {
                "name": "property_records.get",
                "description": "Fetch property records based on location, parcel number and county.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "address": {
                            "type": "string",
                            "description": "Address of the property."
                        },
                        "parcel_number": {
                            "type": "string",
                            "description": "Parcel number of the property."
                        },
                        "county": {
                            "type": "string",
                            "description": "County where the property is located."
                        },
                        "include_owner": {
                            "type": "boolean",
                            "description": "Include owner's name in the property record. Default is false.",
                            "default": false
                        }
                    },
                    "required": [
                        "address",
                        "parcel_number",
                        "county"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"property_records.get\", \"arguments\": {\"address\": \"123 main street\", \"parcel_number\": \"1234567890\", \"county\": \"Santa Clara\"}}]\n",
    "model_result_decoded": [
        {
            "property_records.get": {
                "address": "123 main street",
                "parcel_number": "1234567890",
                "county": "Santa Clara"
            }
        }
    ],
    "possible_answer": [
        {
            "property_records.get": {
                "address": [
                    "123 main street"
                ],
                "parcel_number": [
                    "1234567890"
                ],
                "county": [
                    "Santa Clara"
                ],
                "include_owner": [
                    true
                ]
            }
        }
    ]
}
{
    "id": 165,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Missing required parameter: 'state'."
    ],
    "error_type": "simple_function_checker:missing_required",
    "prompt": {
        "id": "simple_164",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Provide me the official crime rate of violent crime in San Francisco in 2020."
                }
            ]
        ],
        "function": [
            {
                "name": "get_crime_rate",
                "description": "Retrieve the official crime rate of a city.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "city": {
                            "type": "string",
                            "description": "The name of the city."
                        },
                        "state": {
                            "type": "string",
                            "description": "The state where the city is located."
                        },
                        "type": {
                            "type": "string",
                            "description": "Optional. The type of crime. Default is 'violent'"
                        },
                        "year": {
                            "type": "integer",
                            "description": "Optional. The year for the crime rate data. Default is year 2001."
                        }
                    },
                    "required": [
                        "city",
                        "state"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"get_crime_rate\", \"arguments\": {\"type\": \"violent\", \"city\": \"San Francisco\", \"year\": 2020}}]\n",
    "model_result_decoded": [
        {
            "get_crime_rate": {
                "type": "violent",
                "city": "San Francisco",
                "year": 2020
            }
        }
    ],
    "possible_answer": [
        {
            "get_crime_rate": {
                "city": [
                    "San Francisco"
                ],
                "state": [
                    "California",
                    "CA"
                ],
                "type": [
                    "violent",
                    ""
                ],
                "year": [
                    2020
                ]
            }
        }
    ]
}
{
    "id": 167,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'city': 'Chicago'. Expected one of ['Chicago, IL.', 'Chicago, IL']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_166",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find a lawyer specializing in divorce cases and charge fee less than 400 dollars per hour in Chicago."
                }
            ]
        ],
        "function": [
            {
                "name": "lawyer.find_nearby",
                "description": "Locate nearby lawyers based on specific criteria like specialty, fee per hour and city.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "city": {
                            "type": "string",
                            "description": "The city and state, e.g. Chicago, IL."
                        },
                        "specialty": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Civil",
                                    "Divorce",
                                    "Immigration",
                                    "Business",
                                    "Criminal"
                                ]
                            },
                            "description": "Specialization of the lawyer."
                        },
                        "fee": {
                            "type": "integer",
                            "description": "Hourly fee charged by lawyer"
                        }
                    },
                    "required": [
                        "city",
                        "specialty",
                        "fee"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"lawyer.find_nearby\", \"arguments\": {\"city\": \"Chicago\", \"specialty\": [\"Divorce\", \"Fee less than 400\"], \"fee\": 400}}]\n",
    "model_result_decoded": [
        {
            "lawyer.find_nearby": {
                "city": "Chicago",
                "specialty": [
                    "Divorce",
                    "Fee less than 400"
                ],
                "fee": 400
            }
        }
    ],
    "possible_answer": [
        {
            "lawyer.find_nearby": {
                "city": [
                    "Chicago, IL.",
                    "Chicago, IL"
                ],
                "specialty": [
                    [
                        "Divorce"
                    ]
                ],
                "fee": [
                    400
                ]
            }
        }
    ]
}
{
    "id": 173,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Unexpected parameter: 'type'."
    ],
    "error_type": "simple_function_checker:unexpected_param",
    "prompt": {
        "id": "simple_172",
        "question": [
            [
                {
                    "role": "user",
                    "content": "How to obtain the detailed case information of the 'R vs Adams' legal case?"
                }
            ]
        ],
        "function": [
            {
                "name": "legal_case.fetch",
                "description": "Fetch detailed legal case information from database.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "case_id": {
                            "type": "string",
                            "description": "The ID of the legal case."
                        },
                        "details": {
                            "type": "boolean",
                            "description": "True if need the detail info. "
                        }
                    },
                    "required": [
                        "case_id",
                        "details"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"legal_case.fetch\", \"arguments\": {\"type\": \"case\", \"details\": true, \"case_id\": \"R vs Adams\"}}]\n",
    "model_result_decoded": [
        {
            "legal_case.fetch": {
                "type": "case",
                "details": true,
                "case_id": "R vs Adams"
            }
        }
    ],
    "possible_answer": [
        {
            "legal_case.fetch": {
                "case_id": [
                    "R vs Adams"
                ],
                "details": [
                    true
                ]
            }
        }
    ]
}
{
    "id": 181,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'case_type': 'civil'. Expected one of ['', 'all']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_180",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find the lawsuits filed against the company Google in California in the year 2020."
                }
            ]
        ],
        "function": [
            {
                "name": "lawsuits_search",
                "description": "Search for lawsuits against a specific company within a specific time and location.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "company_name": {
                            "type": "string",
                            "description": "The name of the company."
                        },
                        "location": {
                            "type": "string",
                            "description": "The location where the lawsuit was filed."
                        },
                        "year": {
                            "type": "integer",
                            "description": "The year when the lawsuit was filed."
                        },
                        "case_type": {
                            "type": "string",
                            "description": "The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. Default is 'all'."
                        }
                    },
                    "required": [
                        "company_name",
                        "location",
                        "year"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"lawsuits_search\", \"arguments\": {\"company_name\": \"Google\", \"location\": \"California\", \"year\": 2020, \"case_type\": \"civil\"}}]\n",
    "model_result_decoded": [
        {
            "lawsuits_search": {
                "company_name": "Google",
                "location": "California",
                "year": 2020,
                "case_type": "civil"
            }
        }
    ],
    "possible_answer": [
        {
            "lawsuits_search": {
                "company_name": [
                    "Google"
                ],
                "location": [
                    "California",
                    "CA"
                ],
                "year": [
                    2020
                ],
                "case_type": [
                    "",
                    "all"
                ]
            }
        }
    ]
}
{
    "id": 185,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'closed_status': False. Expected one of [True]."
    ],
    "error_type": "value_error:others",
    "prompt": {
        "id": "simple_184",
        "question": [
            [
                {
                    "role": "user",
                    "content": "I need the details of the lawsuit case with case ID of 1234 and verify if it's already closed."
                }
            ]
        ],
        "function": [
            {
                "name": "lawsuit.check_case",
                "description": "Verify the details of a lawsuit case and check its status using case ID.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "case_id": {
                            "type": "integer",
                            "description": "The identification number of the lawsuit case."
                        },
                        "closed_status": {
                            "type": "boolean",
                            "description": "The status of the lawsuit case to be verified."
                        }
                    },
                    "required": [
                        "case_id",
                        "closed_status"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"lawsuit.check_case\", \"arguments\": {\"case_id\": 1234, \"closed_status\": false}}]\n",
    "model_result_decoded": [
        {
            "lawsuit.check_case": {
                "case_id": 1234,
                "closed_status": false
            }
        }
    ],
    "possible_answer": [
        {
            "lawsuit.check_case": {
                "case_id": [
                    1234
                ],
                "closed_status": [
                    true
                ]
            }
        }
    ]
}
{
    "id": 191,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'information': ['Elevation', 'Area', 'Location', 'Established Year']. Expected one of [['Elevation', 'Area'], ['Area', 'Elevation']]."
    ],
    "error_type": "value_error:list/tuple",
    "prompt": {
        "id": "simple_190",
        "question": [
            [
                {
                    "role": "user",
                    "content": "What's the elevation and area of Yellowstone National Park?"
                }
            ]
        ],
        "function": [
            {
                "name": "park_information",
                "description": "Retrieve the basic information such as elevation and area of a national park.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "park_name": {
                            "type": "string",
                            "description": "The name of the national park."
                        },
                        "information": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Elevation",
                                    "Area",
                                    "Location",
                                    "Established Year"
                                ]
                            },
                            "description": "The type of information you want about the park."
                        }
                    },
                    "required": [
                        "park_name",
                        "information"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"park_information\", \"arguments\": {\"park_name\": \"Yellowstone\", \"information\": [\"Elevation\", \"Area\", \"Location\", \"Established Year\"]}}]\n",
    "model_result_decoded": [
        {
            "park_information": {
                "park_name": "Yellowstone",
                "information": [
                    "Elevation",
                    "Area",
                    "Location",
                    "Established Year"
                ]
            }
        }
    ],
    "possible_answer": [
        {
            "park_information": {
                "park_name": [
                    "Yellowstone",
                    "Yellowstone National Park"
                ],
                "information": [
                    [
                        "Elevation",
                        "Area"
                    ],
                    [
                        "Area",
                        "Elevation"
                    ]
                ]
            }
        }
    ]
}
{
    "id": 194,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Unexpected parameter: 'description'."
    ],
    "error_type": "simple_function_checker:unexpected_param",
    "prompt": {
        "id": "simple_193",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find the best local nurseries in Toronto with a good variety of annual plants."
                }
            ]
        ],
        "function": [
            {
                "name": "local_nursery.find",
                "description": "Locate local nurseries based on location and plant types availability.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "The city or locality where the nursery needs to be located."
                        },
                        "plant_types": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Annual",
                                    "Perennial",
                                    "Shrub",
                                    "Tree",
                                    "Herbs",
                                    "Fruits"
                                ]
                            },
                            "description": "Type of plants the nursery should provide."
                        }
                    },
                    "required": [
                        "location",
                        "plant_types"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"local_nursery.find\", \"arguments\": {\"location\": \"Toronto\", \"plant_types\": [\"Annual\"], \"description\": \"Trees\"}}]\n",
    "model_result_decoded": [
        {
            "local_nursery.find": {
                "location": "Toronto",
                "plant_types": [
                    "Annual"
                ],
                "description": "Trees"
            }
        }
    ],
    "possible_answer": [
        {
            "local_nursery.find": {
                "location": [
                    "Toronto"
                ],
                "plant_types": [
                    [
                        "Annual"
                    ]
                ]
            }
        }
    ]
}
{
    "id": 196,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid syntax. Failed to decode AST. Expecting ',' delimiter: line 1 column 159 (char 158)"
    ],
    "error_type": "ast_decoder:decoder_failed",
    "prompt": {
        "id": "simple_195",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Calculate the carbon footprint of my lifestyle, assuming I drive 20 miles a day, consume 3 meat meals a week, and produce 500 lbs of trash in a year."
                }
            ]
        ],
        "function": [
            {
                "name": "calculate_carbon_footprint",
                "description": "Calculate the estimated carbon footprint of a lifestyle based on factors such as daily driving distance, weekly meat consumption, and yearly trash production.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "daily_miles": {
                            "type": "integer",
                            "description": "The daily driving distance in miles."
                        },
                        "meat_meals_per_week": {
                            "type": "integer",
                            "description": "The number of meat-based meals consumed per week."
                        },
                        "annual_trash_weight": {
                            "type": "integer",
                            "description": "The yearly weight of trash production in pounds."
                        },
                        "flights_per_year": {
                            "type": "integer",
                            "description": "The number of flights taken per year. Default is 0."
                        }
                    },
                    "required": [
                        "daily_miles",
                        "meat_meals_per_week",
                        "annual_trash_weight"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"calculate_carbon_footprint\", \"arguments\": {\"type\": \"dict\", \"properties\": {\"daily_miles\": 20, \"meat_meals_per_week\": 3, \"annual_trash_weight\": 500}}]\n",
    "possible_answer": [
        {
            "calculate_carbon_footprint": {
                "daily_miles": [
                    20
                ],
                "meat_meals_per_week": [
                    3
                ],
                "annual_trash_weight": [
                    500
                ],
                "flights_per_year": [
                    "",
                    0
                ]
            }
        }
    ]
}
{
    "id": 197,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'date': '2022-08-16'. Expected one of ['08-16-2022']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_196",
        "question": [
            [
                {
                    "role": "user",
                    "content": "What is the air quality index in London 2022/08/16?"
                }
            ]
        ],
        "function": [
            {
                "name": "air_quality",
                "description": "Retrieve the air quality index for a specific location.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "The city that you want to get the air quality index for."
                        },
                        "date": {
                            "type": "string",
                            "description": "The date (month-day-year) you want to get the air quality index for."
                        }
                    },
                    "required": [
                        "location",
                        "date"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"air_quality\", \"arguments\": {\"location\": \"London\", \"date\": \"2022-08-16\"}}]\n",
    "model_result_decoded": [
        {
            "air_quality": {
                "location": "London",
                "date": "2022-08-16"
            }
        }
    ],
    "possible_answer": [
        {
            "air_quality": {
                "location": [
                    "London"
                ],
                "date": [
                    "08-16-2022"
                ]
            }
        }
    ]
}
{
    "id": 198,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'time': '12'. Expected one of ['12pm', '12:00']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_197",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find the air quality index in San Diego at 12pm."
                }
            ]
        ],
        "function": [
            {
                "name": "get_air_quality_index",
                "description": "Retrieve the air quality index at a specified location and time.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "The location to get the air quality index for."
                        },
                        "time": {
                            "type": "string",
                            "description": "The specific time to check the air quality. Default is the current time."
                        }
                    },
                    "required": [
                        "location",
                        "time"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"get_air_quality_index\", \"arguments\": {\"location\": \"San Diego\", \"time\": \"12\"}}]\n",
    "model_result_decoded": [
        {
            "get_air_quality_index": {
                "location": "San Diego",
                "time": "12"
            }
        }
    ],
    "possible_answer": [
        {
            "get_air_quality_index": {
                "location": [
                    "San Diego"
                ],
                "time": [
                    "12pm",
                    "12:00"
                ]
            }
        }
    ]
}
{
    "id": 199,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'activity_level': 'sedentary'. Expected one of ['', 'moderate']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_198",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Calculate the required water daily intake for a person with weight 70 kg."
                }
            ]
        ],
        "function": [
            {
                "name": "calculate_daily_water_intake",
                "description": "Calculate the recommended daily water intake for a person based on their weight.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "weight": {
                            "type": "integer",
                            "description": "The weight of the person in kilograms."
                        },
                        "activity_level": {
                            "type": "string",
                            "description": "The level of physical activity of the person. Default is 'moderate'."
                        },
                        "climate": {
                            "type": "string",
                            "description": "The climate of the area where the person lives. Default is 'temperate'."
                        }
                    },
                    "required": [
                        "weight"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"calculate_daily_water_intake\", \"arguments\": {\"weight\": 70, \"activity_level\": \"sedentary\", \"climate\": \"temperate\"}}]\n",
    "model_result_decoded": [
        {
            "calculate_daily_water_intake": {
                "weight": 70,
                "activity_level": "sedentary",
                "climate": "temperate"
            }
        }
    ],
    "possible_answer": [
        {
            "calculate_daily_water_intake": {
                "weight": [
                    70
                ],
                "activity_level": [
                    "",
                    "moderate"
                ],
                "climate": [
                    "",
                    "temperate"
                ]
            }
        }
    ]
}
{
    "id": 203,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'energy_type': 'Solar'. Expected one of ['renewable']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_202",
        "question": [
            [
                {
                    "role": "user",
                    "content": "How many greenhouse gas emissions would I save if I switched to renewable energy sources for 3 months in California?"
                }
            ]
        ],
        "function": [
            {
                "name": "calculate_emission_savings",
                "description": "Calculate potential greenhouse gas emissions saved by switching to renewable energy sources.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "energy_type": {
                            "type": "string",
                            "description": "Type of the renewable energy source."
                        },
                        "usage_duration": {
                            "type": "integer",
                            "description": "Usage duration in months."
                        },
                        "region": {
                            "type": "string",
                            "description": "The region where you use energy. Default is 'Texas'."
                        }
                    },
                    "required": [
                        "energy_type",
                        "usage_duration"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"calculate_emission_savings\", \"arguments\": {\"energy_type\": \"Solar\", \"usage_duration\": 3, \"region\": \"California\"}}]\n",
    "model_result_decoded": [
        {
            "calculate_emission_savings": {
                "energy_type": "Solar",
                "usage_duration": 3,
                "region": "California"
            }
        }
    ],
    "possible_answer": [
        {
            "calculate_emission_savings": {
                "energy_type": [
                    "renewable"
                ],
                "usage_duration": [
                    3
                ],
                "region": [
                    "California",
                    "CA"
                ]
            }
        }
    ]
}
{
    "id": 209,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'avoid': ['highways', 'ferries']. Expected one of [['highways', 'tolls'], ['tolls', 'highways']]."
    ],
    "error_type": "value_error:list/tuple",
    "prompt": {
        "id": "simple_208",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Get me the directions from New York to Los Angeles avoiding highways and toll roads."
                }
            ]
        ],
        "function": [
            {
                "name": "map_service.get_directions",
                "description": "Retrieve directions from a starting location to an ending location, including options for route preferences.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "start": {
                            "type": "string",
                            "description": "Starting location for the route."
                        },
                        "end": {
                            "type": "string",
                            "description": "Ending location for the route."
                        },
                        "avoid": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "tolls",
                                    "highways",
                                    "ferries"
                                ]
                            },
                            "description": "Route features to avoid. Default is ['highways', 'ferries']"
                        }
                    },
                    "required": [
                        "start",
                        "end"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"map_service.get_directions\", \"arguments\": {\"start\": \"New York\", \"end\": \"Los Angeles\", \"avoid\": [\"highways\", \"ferries\"]}}]\n",
    "model_result_decoded": [
        {
            "map_service.get_directions": {
                "start": "New York",
                "end": "Los Angeles",
                "avoid": [
                    "highways",
                    "ferries"
                ]
            }
        }
    ],
    "possible_answer": [
        {
            "map_service.get_directions": {
                "start": [
                    "New York",
                    "NYC"
                ],
                "end": [
                    "Los Angeles",
                    "LA"
                ],
                "avoid": [
                    [
                        "highways",
                        "tolls"
                    ],
                    [
                        "tolls",
                        "highways"
                    ]
                ]
            }
        }
    ]
}
{
    "id": 210,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'facilities': ['Fiction', 'Free Wi-Fi']. Expected one of [['Fiction', 'Wi-Fi'], ['Wi-Fi', 'Fiction']]."
    ],
    "error_type": "value_error:list/tuple",
    "prompt": {
        "id": "simple_209",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Locate the nearest public library in Boston, Massachusetts with English fiction section and free Wi-Fi."
                }
            ]
        ],
        "function": [
            {
                "name": "public_library.find_nearby",
                "description": "Locate nearby public libraries based on specific criteria like English fiction availability and Wi-Fi.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "The city and state, e.g. Boston, MA"
                        },
                        "facilities": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Wi-Fi",
                                    "Reading Room",
                                    "Fiction",
                                    "Children Section",
                                    "Cafe"
                                ]
                            },
                            "description": "Facilities and sections in public library."
                        }
                    },
                    "required": [
                        "location",
                        "facilities"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"public_library.find_nearby\", \"arguments\": {\"location\": \"Boston, MA\", \"facilities\": [\"Fiction\", \"Free Wi-Fi\"]}}]\n",
    "model_result_decoded": [
        {
            "public_library.find_nearby": {
                "location": "Boston, MA",
                "facilities": [
                    "Fiction",
                    "Free Wi-Fi"
                ]
            }
        }
    ],
    "possible_answer": [
        {
            "public_library.find_nearby": {
                "location": [
                    "Boston, MA",
                    "Boston, Massachusetts"
                ],
                "facilities": [
                    [
                        "Fiction",
                        "Wi-Fi"
                    ],
                    [
                        "Wi-Fi",
                        "Fiction"
                    ]
                ]
            }
        }
    ]
}
{
    "id": 212,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid syntax. Failed to decode AST. Expecting ',' delimiter: line 1 column 104 (char 103)"
    ],
    "error_type": "ast_decoder:decoder_failed",
    "prompt": {
        "id": "simple_211",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Send an email to John Doe at john.doe@example.com with the subject 'Meeting' and body 'Let's meet at 10 AM tomorrow'."
                }
            ]
        ],
        "function": [
            {
                "name": "send_email",
                "description": "Send an email to the specified email address.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "to": {
                            "type": "string",
                            "description": "The email address to send to."
                        },
                        "subject": {
                            "type": "string",
                            "description": "The subject of the email."
                        },
                        "body": {
                            "type": "string",
                            "description": "The body content of the email."
                        },
                        "cc": {
                            "type": "string",
                            "description": "The email address to carbon copy. Default is empty if not specified."
                        },
                        "bcc": {
                            "type": "string",
                            "description": "The email address to blind carbon copy. Default is empty if not specified."
                        }
                    },
                    "required": [
                        "to",
                        "subject",
                        "body"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"send_email\", \"arguments\": {\"to\": \"john.doe@example.com\", \"subject\": \"Meeting\", \"body\": \"Let's meet at 10 AM tomorrow\"}}]\n",
    "possible_answer": [
        {
            "send_email": {
                "to": [
                    "john.doe@example.com"
                ],
                "subject": [
                    "Meeting"
                ],
                "body": [
                    "Let's meet at 10 AM tomorrow",
                    "Let's meet at 10 AM tomorrow."
                ],
                "cc": [
                    ""
                ],
                "bcc": [
                    ""
                ]
            }
        }
    ]
}
{
    "id": 214,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Optional parameter 'direct_flight' not provided and not marked as optional."
    ],
    "error_type": "simple_function_checker:missing_optional",
    "prompt": {
        "id": "simple_213",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Book a direct flight from San Francisco to London for 2022-04-27 afternoon"
                }
            ]
        ],
        "function": [
            {
                "name": "flight.book",
                "description": "Book a direct flight for a specific date and time from departure location to destination location.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "departure_location": {
                            "type": "string",
                            "description": "The location you are departing from."
                        },
                        "destination_location": {
                            "type": "string",
                            "description": "The location you are flying to."
                        },
                        "date": {
                            "type": "string",
                            "description": "The date of the flight. Accepts standard date format e.g., 2022-04-28."
                        },
                        "time": {
                            "type": "string",
                            "description": "Preferred time of flight. Default is 'morning'."
                        },
                        "direct_flight": {
                            "type": "boolean",
                            "description": "If set to true, only direct flights will be searched. Default is false."
                        }
                    },
                    "required": [
                        "departure_location",
                        "destination_location",
                        "date"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"flight.book\", \"arguments\": {\"departure_location\": \"San Francisco\", \"destination_location\": \"London\", \"date\": \"2022-04-27\", \"time\": \"afternoon\"}}]\n",
    "model_result_decoded": [
        {
            "flight.book": {
                "departure_location": "San Francisco",
                "destination_location": "London",
                "date": "2022-04-27",
                "time": "afternoon"
            }
        }
    ],
    "possible_answer": [
        {
            "flight.book": {
                "departure_location": [
                    "San Francisco",
                    "SF"
                ],
                "destination_location": [
                    "London"
                ],
                "date": [
                    "2022-04-27",
                    "04/27/2022",
                    "Apr 27, 2022"
                ],
                "time": [
                    "afternoon",
                    ""
                ],
                "direct_flight": [
                    true
                ]
            }
        }
    ]
}
{
    "id": 217,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid syntax. Failed to decode AST. Expecting ',' delimiter: line 1 column 81 (char 80)"
    ],
    "error_type": "ast_decoder:decoder_failed",
    "prompt": {
        "id": "simple_216",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Analyze the sentiment of a customer review 'I love the food here! It's always fresh and delicious.'."
                }
            ]
        ],
        "function": [
            {
                "name": "sentiment_analysis",
                "description": "Perform sentiment analysis on a given piece of text.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "text": {
                            "type": "string",
                            "description": "The text on which to perform sentiment analysis."
                        },
                        "language": {
                            "type": "string",
                            "description": "The language in which the text is written."
                        }
                    },
                    "required": [
                        "text",
                        "language"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"sentiment_analysis\", \"arguments\": {\"text\": \"I love the food here! It's always fresh and delicious.\", \"language\": \"en\"}}]\n",
    "possible_answer": [
        {
            "sentiment_analysis": {
                "text": [
                    "I love the food here! It's always fresh and delicious."
                ],
                "language": [
                    "english",
                    "English",
                    "en"
                ]
            }
        }
    ]
}
{
    "id": 225,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'topic': 'behaviour'. Expected one of ['psychology']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_224",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find the most followed person on twitter who tweets about psychology related to behaviour and group dynamics."
                }
            ]
        ],
        "function": [
            {
                "name": "social_media_analytics.most_followed",
                "description": "Find the most followed Twitter user related to certain topics.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "topic": {
                            "type": "string",
                            "description": "The main topic of interest."
                        },
                        "sub_topics": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Sub-topics related to main topic. Default is empty."
                        },
                        "region": {
                            "type": "string",
                            "description": "Region of interest for twitter search. Default is 'all'."
                        }
                    },
                    "required": [
                        "topic"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"social_media_analytics.most_followed\", \"arguments\": {\"topic\": \"behaviour\", \"sub_topics\": [\"group dynamics\"], \"region\": \"all\"}}]\n",
    "model_result_decoded": [
        {
            "social_media_analytics.most_followed": {
                "topic": "behaviour",
                "sub_topics": [
                    "group dynamics"
                ],
                "region": "all"
            }
        }
    ],
    "possible_answer": [
        {
            "social_media_analytics.most_followed": {
                "topic": [
                    "psychology"
                ],
                "sub_topics": [
                    [
                        "behaviour",
                        "group dynamics"
                    ]
                ],
                "region": [
                    "",
                    "all"
                ]
            }
        }
    ]
}
{
    "id": 226,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'demographic': 'population'. Expected one of ['', 'all']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_225",
        "question": [
            [
                {
                    "role": "user",
                    "content": "What is the percentage of population preferring digital reading over physical books?"
                }
            ]
        ],
        "function": [
            {
                "name": "psych_research.get_preference",
                "description": "Gathers research data on public preference between two options, based on societal category.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "category": {
                            "type": "string",
                            "description": "The societal category the preference data is about. E.g. reading, transportation, food"
                        },
                        "option_one": {
                            "type": "string",
                            "description": "The first option people could prefer."
                        },
                        "option_two": {
                            "type": "string",
                            "description": "The second option people could prefer."
                        },
                        "demographic": {
                            "type": "string",
                            "description": "Specific demographic of society to narrow down the research.",
                            "default": "all"
                        }
                    },
                    "required": [
                        "category",
                        "option_one",
                        "option_two"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"psych_research.get_preference\", \"arguments\": {\"category\": \"reading\", \"option_one\": \"digital\", \"option_two\": \"physical\", \"demographic\": \"population\"}}]\n",
    "model_result_decoded": [
        {
            "psych_research.get_preference": {
                "category": "reading",
                "option_one": "digital",
                "option_two": "physical",
                "demographic": "population"
            }
        }
    ],
    "possible_answer": [
        {
            "psych_research.get_preference": {
                "category": [
                    "reading"
                ],
                "option_one": [
                    "digital reading",
                    "digital"
                ],
                "option_two": [
                    "physical book",
                    "physical",
                    "physical books"
                ],
                "demographic": [
                    "",
                    "all"
                ]
            }
        }
    ]
}
{
    "id": 230,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'characteristics': ['efficiency', 'organization', 'easy going', 'compassion']. Expected one of [['efficient', 'organized', 'easy going', 'compassionate']]."
    ],
    "error_type": "value_error:list/tuple",
    "prompt": {
        "id": "simple_229",
        "question": [
            [
                {
                    "role": "user",
                    "content": "What's my Big Five Personality trait scores given that I am efficient, organized, easy going and compassionate?"
                }
            ]
        ],
        "function": [
            {
                "name": "get_bigfive_scores",
                "description": "Retrieve Big Five Personality trait scores based on individual's behavioural characteristics.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "characteristics": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of user's behavioural characteristics."
                        },
                        "scale": {
                            "type": "string",
                            "enum": [
                                "high",
                                "medium",
                                "low"
                            ],
                            "description": "The scoring scale of traits (default is medium)."
                        }
                    },
                    "required": [
                        "characteristics"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"get_bigfive_scores\", \"arguments\": {\"characteristics\": [\"efficiency\", \"organization\", \"easy going\", \"compassion\"], \"scale\": \"high\"}}]\n",
    "model_result_decoded": [
        {
            "get_bigfive_scores": {
                "characteristics": [
                    "efficiency",
                    "organization",
                    "easy going",
                    "compassion"
                ],
                "scale": "high"
            }
        }
    ],
    "possible_answer": [
        {
            "get_bigfive_scores": {
                "characteristics": [
                    [
                        "efficient",
                        "organized",
                        "easy going",
                        "compassionate"
                    ]
                ],
                "scale": [
                    "medium",
                    ""
                ]
            }
        }
    ]
}
{
    "id": 232,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Incorrect type for parameter 'event_type'. Expected type array, got str. Parameter value: 'War'."
    ],
    "error_type": "type_error:simple",
    "prompt": {
        "id": "simple_231",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Provide key war events in German history from 1871 to 1945."
                }
            ]
        ],
        "function": [
            {
                "name": "history.get_key_events",
                "description": "Retrieve key historical events within a specific period for a certain country.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "country": {
                            "type": "string",
                            "description": "The name of the country for which history is queried."
                        },
                        "start_year": {
                            "type": "integer",
                            "description": "Start year of the period for which history is queried."
                        },
                        "end_year": {
                            "type": "integer",
                            "description": "End year of the period for which history is queried."
                        },
                        "event_type": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "War",
                                    "Revolutions",
                                    "Diplomacy",
                                    "Economy"
                                ]
                            },
                            "description": "Types of event. Default to 'all', which all types will be considered."
                        }
                    },
                    "required": [
                        "country",
                        "start_year",
                        "end_year"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"history.get_key_events\", \"arguments\": {\"country\": \"Germany\", \"start_year\": 1871, \"end_year\": 1945, \"event_type\": \"War\"}}]\n",
    "model_result_decoded": [
        {
            "history.get_key_events": {
                "country": "Germany",
                "start_year": 1871,
                "end_year": 1945,
                "event_type": "War"
            }
        }
    ],
    "possible_answer": [
        {
            "history.get_key_events": {
                "country": [
                    "Germany",
                    "DE"
                ],
                "start_year": [
                    1871
                ],
                "end_year": [
                    1945
                ],
                "event_type": [
                    [
                        "War"
                    ]
                ]
            }
        }
    ]
}
{
    "id": 236,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'location': 'Europe'. Expected one of ['', 'Lisbon', 'Lisbon, Portugal']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_235",
        "question": [
            [
                {
                    "role": "user",
                    "content": "When was the signing of the Treaty of Lisbon?"
                }
            ]
        ],
        "function": [
            {
                "name": "get_event_date",
                "description": "Retrieve the date of a historical event.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "event": {
                            "type": "string",
                            "description": "The name of the historical event."
                        },
                        "location": {
                            "type": "string",
                            "description": "Location where the event took place. Default to global if not specified."
                        }
                    },
                    "required": [
                        "event"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"get_event_date\", \"arguments\": {\"event\": \"Treaty of Lisbon\", \"location\": \"Europe\"}}]\n",
    "model_result_decoded": [
        {
            "get_event_date": {
                "event": "Treaty of Lisbon",
                "location": "Europe"
            }
        }
    ],
    "possible_answer": [
        {
            "get_event_date": {
                "event": [
                    "Treaty of Lisbon",
                    "Signing of the Treaty of Lisbon",
                    "The signing of the Treaty of Lisbon"
                ],
                "location": [
                    "",
                    "Lisbon",
                    "Lisbon, Portugal"
                ]
            }
        }
    ]
}
{
    "id": 239,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'event': 'Civil War'. Expected one of ['American Civil War']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_238",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Who was the president of the United States during the American Civil War?"
                }
            ]
        ],
        "function": [
            {
                "name": "us_history.get_president",
                "description": "Retrieve the U.S. president during a specific event in American history.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "event": {
                            "type": "string",
                            "description": "The event in U.S. history."
                        },
                        "year": {
                            "type": "integer",
                            "description": "The specific year of the event."
                        }
                    },
                    "required": [
                        "event",
                        "year"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"us_history.get_president\", \"arguments\": {\"event\": \"Civil War\", \"year\": 1861}}]\n\n",
    "model_result_decoded": [
        {
            "us_history.get_president": {
                "event": "Civil War",
                "year": 1861
            }
        }
    ],
    "possible_answer": [
        {
            "us_history.get_president": {
                "event": [
                    "American Civil War"
                ],
                "year": [
                    1861,
                    1862,
                    1863,
                    1864,
                    1865
                ]
            }
        }
    ]
}
{
    "id": 243,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'discovery': 'evolution'. Expected one of ['Theory of Evolution', 'theory of evolution']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_242",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Who is the scientist that first proposed the theory of evolution?"
                }
            ]
        ],
        "function": [
            {
                "name": "get_scientist_for_discovery",
                "description": "Retrieve the scientist's name who is credited for a specific scientific discovery or theory.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "discovery": {
                            "type": "string",
                            "description": "The scientific discovery or theory."
                        }
                    },
                    "required": [
                        "discovery"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"get_scientist_for_discovery\", \"arguments\": {\"discovery\": \"evolution\"}}]\n",
    "model_result_decoded": [
        {
            "get_scientist_for_discovery": {
                "discovery": "evolution"
            }
        }
    ],
    "possible_answer": [
        {
            "get_scientist_for_discovery": {
                "discovery": [
                    "Theory of Evolution",
                    "theory of evolution"
                ]
            }
        }
    ]
}
{
    "id": 246,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Missing required parameter: 'element_name'."
    ],
    "error_type": "simple_function_checker:missing_required",
    "prompt": {
        "id": "simple_245",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Who discovered radium?"
                }
            ]
        ],
        "function": [
            {
                "name": "discoverer.get",
                "description": "Retrieve the name of the discoverer of an element based on its name.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "element_name": {
                            "type": "string",
                            "description": "The name of the element."
                        },
                        "year": {
                            "type": "integer",
                            "description": "Optional parameter that refers to the year of discovery. It could be helpful in case an element was discovered more than once. Default to 0, which means not use it."
                        },
                        "first": {
                            "type": "boolean",
                            "default": true,
                            "description": "Optional parameter indicating if the first discoverer's name should be retrieved."
                        }
                    },
                    "required": [
                        "element_name"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"discoverer.get\", \"arguments\": {\"type\": \"radium\"}}]\n",
    "model_result_decoded": [
        {
            "discoverer.get": {
                "type": "radium"
            }
        }
    ],
    "possible_answer": [
        {
            "discoverer.get": {
                "element_name": [
                    "'radium'",
                    "\"radium\"",
                    "radium"
                ],
                "year": [
                    "",
                    0
                ],
                "first": [
                    true,
                    ""
                ]
            }
        }
    ]
}
{
    "id": 249,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'invention_name': 'relativity'. Expected one of ['theory of relativity', 'Theory of Relativity']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_248",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Who invented the theory of relativity and in which year?"
                }
            ]
        ],
        "function": [
            {
                "name": "science_history.get_invention",
                "description": "Retrieve the inventor and year of invention based on the invention's name.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "invention_name": {
                            "type": "string",
                            "description": "The name of the invention."
                        },
                        "want_year": {
                            "type": "boolean",
                            "default": false,
                            "description": "Return the year of invention if set to true."
                        }
                    },
                    "required": [
                        "invention_name",
                        "want_year"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"science_history.get_invention\", \"arguments\": {\"invention_name\": \"relativity\", \"want_year\": true}}]\n",
    "model_result_decoded": [
        {
            "science_history.get_invention": {
                "invention_name": "relativity",
                "want_year": true
            }
        }
    ],
    "possible_answer": [
        {
            "science_history.get_invention": {
                "invention_name": [
                    "theory of relativity",
                    "Theory of Relativity"
                ],
                "want_year": [
                    true
                ]
            }
        }
    ]
}
{
    "id": 261,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid syntax. Failed to decode AST. Expecting ',' delimiter: line 1 column 248 (char 247)"
    ],
    "error_type": "ast_decoder:decoder_failed",
    "prompt": {
        "id": "simple_260",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Calculate how many gallons of paint is required to paint a wall with width of 20ft and height of 12ft, assuming 1 gallon covers approximately 350 sq.ft. Don't include window area of 15 sq.ft."
                }
            ]
        ],
        "function": [
            {
                "name": "paint_requirement.calculate",
                "description": "Calculate the amount of paint required to paint a given area. Account for coverage efficiency of the paint and exclusions (like windows).",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "area": {
                            "type": "dict",
                            "properties": {
                                "width": {
                                    "type": "integer",
                                    "description": "The width of the area to be painted in feet."
                                },
                                "height": {
                                    "type": "integer",
                                    "description": "The height of the area to be painted in feet."
                                }
                            },
                            "description": "The area to be painted."
                        },
                        "paint_coverage": {
                            "type": "integer",
                            "description": "Coverage area per gallon of the paint in square feet.",
                            "default": 350
                        },
                        "exclusion": {
                            "type": "dict",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "The type of the exclusion e.g window, door etc."
                                },
                                "area": {
                                    "type": "integer",
                                    "description": "The area of the exclusion in square feet."
                                }
                            },
                            "description": "Area not to be painted. Default to not use any exclusion if not specified."
                        }
                    },
                    "required": [
                        "area",
                        "paint_coverage"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"paint_requirement.calculate\", \"arguments\": {\"type\": \"wall\", \"area\": {\"width\": 20, \"height\": 12}, \"description\": \"Coverage area per gallon of the paint in square feet.\", \"paint_coverage\": 350, \"exclusion\": {\"type\": \"window\", \"area\": 15}}]\n",
    "possible_answer": [
        {
            "paint_requirement.calculate": {
                "area": [
                    {
                        "width": [
                            20
                        ],
                        "height": [
                            12
                        ]
                    }
                ],
                "paint_coverage": [
                    350
                ],
                "exclusion": [
                    {
                        "type": [
                            "window"
                        ],
                        "area": [
                            15
                        ]
                    }
                ]
            }
        }
    ]
}
{
    "id": 265,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Missing required parameter: 'artist'."
    ],
    "error_type": "simple_function_checker:missing_required",
    "prompt": {
        "id": "simple_264",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find the size of the sculpture with title 'David' by Michelangelo."
                }
            ]
        ],
        "function": [
            {
                "name": "sculpture.get_details",
                "description": "Retrieve details of a sculpture based on the artist and the title of the sculpture.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "artist": {
                            "type": "string",
                            "description": "The artist who made the sculpture."
                        },
                        "title": {
                            "type": "string",
                            "description": "The title of the sculpture."
                        },
                        "detail": {
                            "type": "string",
                            "description": "The specific detail wanted about the sculpture. Default is 'general information'."
                        }
                    },
                    "required": [
                        "artist",
                        "title"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"sculpture.get_details\", \"arguments\": {\"type\": \"sculpture\", \"title\": \"David\", \"detail\": \"size\"}}]\n",
    "model_result_decoded": [
        {
            "sculpture.get_details": {
                "type": "sculpture",
                "title": "David",
                "detail": "size"
            }
        }
    ],
    "possible_answer": [
        {
            "sculpture.get_details": {
                "artist": [
                    "Michelangelo"
                ],
                "title": [
                    "David"
                ],
                "detail": [
                    "size"
                ]
            }
        }
    ]
}
{
    "id": 268,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'month': 'upcoming'. Expected one of ['']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_267",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find the top rated modern sculpture exhibition happening in New York in the upcoming month."
                }
            ]
        ],
        "function": [
            {
                "name": "find_exhibition",
                "description": "Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "The city and state where the exhibition is held, e.g., New York City, NY."
                        },
                        "art_form": {
                            "type": "string",
                            "description": "The form of art the exhibition is displaying e.g., sculpture."
                        },
                        "month": {
                            "type": "string",
                            "description": "The month of exhibition. Default value will return upcoming events if not specified."
                        },
                        "user_ratings": {
                            "type": "string",
                            "enum": [
                                "low",
                                "average",
                                "high"
                            ],
                            "description": "Select exhibitions with user rating threshold. Default is 'low'"
                        }
                    },
                    "required": [
                        "location",
                        "art_form"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"find_exhibition\", \"arguments\": {\"location\": \"New York City, NY\", \"art_form\": \"sculpture\", \"month\": \"upcoming\"}}]\n",
    "model_result_decoded": [
        {
            "find_exhibition": {
                "location": "New York City, NY",
                "art_form": "sculpture",
                "month": "upcoming"
            }
        }
    ],
    "possible_answer": [
        {
            "find_exhibition": {
                "location": [
                    "New York City, NY"
                ],
                "art_form": [
                    "sculpture",
                    "modern sculpture"
                ],
                "month": [
                    ""
                ],
                "user_ratings": [
                    "high"
                ]
            }
        }
    ]
}
{
    "id": 275,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Missing required parameter: 'museum_name'."
    ],
    "error_type": "simple_function_checker:missing_required",
    "prompt": {
        "id": "simple_274",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find information about the opening hours of the Metropolitan Museum of Art."
                }
            ]
        ],
        "function": [
            {
                "name": "museum_info",
                "description": "Retrieve information about the opening hours of a museum based on its name.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "museum_name": {
                            "type": "string",
                            "description": "The name of the museum."
                        },
                        "info_type": {
                            "type": "string",
                            "description": "The type of information needed about the museum.",
                            "default": "opening_hours"
                        }
                    },
                    "required": [
                        "museum_name"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"museum_info\", \"arguments\": {\"type\": \"metropolitan_museum_of_art\", \"info_type\": \"opening_hours\"}}]\n",
    "model_result_decoded": [
        {
            "museum_info": {
                "type": "metropolitan_museum_of_art",
                "info_type": "opening_hours"
            }
        }
    ],
    "possible_answer": [
        {
            "museum_info": {
                "museum_name": [
                    "Metropolitan Museum of Art",
                    "The Metropolitan Museum of Art",
                    "Met Museum"
                ],
                "info_type": [
                    "opening_hours",
                    ""
                ]
            }
        }
    ]
}
{
    "id": 278,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Missing required parameter: 'museum'."
    ],
    "error_type": "simple_function_checker:missing_required",
    "prompt": {
        "id": "simple_277",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find the working hours and ticket price of The British Museum for this weekend, Jun.20,2023."
                }
            ]
        ],
        "function": [
            {
                "name": "museum_info",
                "description": "Get information about a museum including its opening hours and ticket prices for a specific date range.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "museum": {
                            "type": "string",
                            "description": "The name of the museum."
                        },
                        "date": {
                            "type": "string",
                            "description": "The specific date for which information is needed, in the format of YYYY-MM-DD such as '2022-12-01'."
                        },
                        "information": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "opening_hours",
                                    "ticket_price",
                                    "address"
                                ]
                            },
                            "description": "The type of information needed from the museum. This is optional and defaults to 'all' if not specified.",
                            "default": "all"
                        }
                    },
                    "required": [
                        "museum",
                        "date"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"museum_info\", \"arguments\": {\"type\": \"british_museum\", \"date\": \"2023-06-20\", \"information\": [\"working_hours\", \"ticket_price\"]}}]\n",
    "model_result_decoded": [
        {
            "museum_info": {
                "type": "british_museum",
                "date": "2023-06-20",
                "information": [
                    "working_hours",
                    "ticket_price"
                ]
            }
        }
    ],
    "possible_answer": [
        {
            "museum_info": {
                "museum": [
                    "The British Museum"
                ],
                "date": [
                    "2023-06-20"
                ],
                "information": [
                    [
                        "opening_hours",
                        "ticket_price"
                    ],
                    [
                        "ticket_price",
                        "opening_hours"
                    ]
                ]
            }
        }
    ]
}
{
    "id": 279,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid syntax. Failed to decode AST. Expecting ',' delimiter: line 1 column 190 (char 189)"
    ],
    "error_type": "ast_decoder:decoder_failed",
    "prompt": {
        "id": "simple_278",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find me the average price and ratings of piano from Yamaha."
                }
            ]
        ],
        "function": [
            {
                "name": "get_instrument_details",
                "description": "Retrieve the average price and ratings of an instrument from a particular manufacturer.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "instrument": {
                            "type": "string",
                            "description": "The name of the instrument."
                        },
                        "manufacturer": {
                            "type": "string",
                            "description": "The manufacturer of the instrument."
                        },
                        "features": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "price",
                                    "rating"
                                ]
                            },
                            "description": "The features to retrieve about the instrument. Default is 'price'"
                        }
                    },
                    "required": [
                        "instrument",
                        "manufacturer"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"get_instrument_details\", \"arguments\": {\"type\": \"piano\", \"manufacturer\": \"Yamaha\", \"features\": \"price\", \"description\": \"The features to retrieve about the instrument. Default is 'price'\"}}]\n",
    "possible_answer": [
        {
            "get_instrument_details": {
                "instrument": [
                    "piano"
                ],
                "manufacturer": [
                    "Yamaha"
                ],
                "features": [
                    [
                        "price",
                        "rating"
                    ]
                ]
            }
        }
    ]
}
{
    "id": 280,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Missing required parameter: 'brand'."
    ],
    "error_type": "simple_function_checker:missing_required",
    "prompt": {
        "id": "simple_279",
        "question": [
            [
                {
                    "role": "user",
                    "content": "What's the retail price of a Fender American Professional II Stratocaster in Rosewood Finish?"
                }
            ]
        ],
        "function": [
            {
                "name": "instrument_price.get",
                "description": "Retrieve the current retail price of a specific musical instrument.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "brand": {
                            "type": "string",
                            "description": "The brand of the instrument."
                        },
                        "model": {
                            "type": "string",
                            "description": "The specific model of the instrument."
                        },
                        "finish": {
                            "type": "string",
                            "description": "The color or type of finish on the instrument."
                        }
                    },
                    "required": [
                        "brand",
                        "model",
                        "finish"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"instrument_price.get\", \"arguments\": {\"type\": \"stratocaster\", \"model\": \"American Professional II\", \"finish\": \"Rosewood\"}}]\n",
    "model_result_decoded": [
        {
            "instrument_price.get": {
                "type": "stratocaster",
                "model": "American Professional II",
                "finish": "Rosewood"
            }
        }
    ],
    "possible_answer": [
        {
            "instrument_price.get": {
                "brand": [
                    "Fender"
                ],
                "model": [
                    "American Professional II Stratocaster"
                ],
                "finish": [
                    "Rosewood"
                ]
            }
        }
    ]
}
{
    "id": 284,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'model': 'Les Paul'. Expected one of ['Gibson Les Paul']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_283",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find the price of a used Gibson Les Paul guitar in excellent condition in the Chicago area."
                }
            ]
        ],
        "function": [
            {
                "name": "guitar_price.find",
                "description": "Retrieve the price of a specific used guitar model based on its condition and location.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "model": {
                            "type": "string",
                            "description": "The model of the guitar."
                        },
                        "condition": {
                            "type": "string",
                            "enum": [
                                "Poor",
                                "Good",
                                "Excellent"
                            ],
                            "description": "The condition of the guitar."
                        },
                        "location": {
                            "type": "string",
                            "description": "The location where the guitar is being sold."
                        }
                    },
                    "required": [
                        "model",
                        "condition",
                        "location"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"guitar_price.find\", \"arguments\": {\"model\": \"Les Paul\", \"condition\": \"Excellent\", \"location\": \"Chicago\"}}]\n",
    "model_result_decoded": [
        {
            "guitar_price.find": {
                "model": "Les Paul",
                "condition": "Excellent",
                "location": "Chicago"
            }
        }
    ],
    "possible_answer": [
        {
            "guitar_price.find": {
                "model": [
                    "Gibson Les Paul"
                ],
                "condition": [
                    "Excellent"
                ],
                "location": [
                    "Chicago",
                    "Chicago, IL",
                    "Chicago, Illinois"
                ]
            }
        }
    ]
}
{
    "id": 286,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'location': 'Chicago'. Expected one of ['Chicago, Illinois', 'Chicago, IL']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_285",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find me a Rock concert in Chicago with ticket availability under $100."
                }
            ]
        ],
        "function": [
            {
                "name": "find_concert",
                "description": "Locate a concert in a specified location within a certain budget.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "The city where you are looking for a concert. In the format City, State."
                        },
                        "price": {
                            "type": "integer",
                            "description": "Maximum ticket price."
                        },
                        "genre": {
                            "type": "string",
                            "description": "Music genre of the concert. Default to 'Jazz'. ",
                            "enum": [
                                "Rock",
                                "Pop",
                                "Country",
                                "Jazz",
                                "Classical"
                            ]
                        }
                    },
                    "required": [
                        "location",
                        "price"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"find_concert\", \"arguments\": {\"location\": \"Chicago\", \"price\": 100, \"genre\": \"Rock\"}}]\n",
    "model_result_decoded": [
        {
            "find_concert": {
                "location": "Chicago",
                "price": 100,
                "genre": "Rock"
            }
        }
    ],
    "possible_answer": [
        {
            "find_concert": {
                "location": [
                    "Chicago, Illinois",
                    "Chicago, IL"
                ],
                "price": [
                    100
                ],
                "genre": [
                    "Rock"
                ]
            }
        }
    ]
}
{
    "id": 287,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Missing required parameter: 'artist'."
    ],
    "error_type": "simple_function_checker:missing_required",
    "prompt": {
        "id": "simple_286",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Get concert details for the artist Beyonce performing in San Diego next month (April 2022)."
                }
            ]
        ],
        "function": [
            {
                "name": "concert.get_details",
                "description": "Fetch the details for a particular concert based on the artist and location.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "artist": {
                            "type": "string",
                            "description": "Name of the artist/band who's performing."
                        },
                        "location": {
                            "type": "string",
                            "description": "City where the concert is taking place."
                        },
                        "date": {
                            "type": "string",
                            "description": "Date of the concert in 'mm-yyyy' format. Default is the current month if not specified."
                        }
                    },
                    "required": [
                        "artist",
                        "location"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"concert.get_details\", \"arguments\": {\"type\": \"beyonce\", \"location\": \"San Diego\", \"date\": \"2022-04\"}}]\n",
    "model_result_decoded": [
        {
            "concert.get_details": {
                "type": "beyonce",
                "location": "San Diego",
                "date": "2022-04"
            }
        }
    ],
    "possible_answer": [
        {
            "concert.get_details": {
                "artist": [
                    "Beyonce"
                ],
                "location": [
                    "San Diego",
                    "San Diego, California",
                    "CA"
                ],
                "date": [
                    "04-2022",
                    "April 2022"
                ]
            }
        }
    ]
}
{
    "id": 291,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Missing required parameter: 'artist'."
    ],
    "error_type": "simple_function_checker:missing_required",
    "prompt": {
        "id": "simple_290",
        "question": [
            [
                {
                    "role": "user",
                    "content": "What's the timing and location for The Weeknd's concert happening in December?"
                }
            ]
        ],
        "function": [
            {
                "name": "concert.find_details",
                "description": "Finds details of a concert event.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "artist": {
                            "type": "string",
                            "description": "Name of the artist performing."
                        },
                        "month": {
                            "type": "string",
                            "description": "Month in which the concert is happening."
                        },
                        "year": {
                            "type": "integer",
                            "description": "Year of the concert.",
                            "default": 2022
                        }
                    },
                    "required": [
                        "artist",
                        "month"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"concert.find_details\", \"arguments\": {\"type\": \"The Weeknd\", \"month\": \"December\", \"year\": 2022}}]\n",
    "model_result_decoded": [
        {
            "concert.find_details": {
                "type": "The Weeknd",
                "month": "December",
                "year": 2022
            }
        }
    ],
    "possible_answer": [
        {
            "concert.find_details": {
                "artist": [
                    "The Weeknd"
                ],
                "month": [
                    "December"
                ],
                "year": [
                    "",
                    2022
                ]
            }
        }
    ]
}
{
    "id": 294,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'track_length': 1800. Expected one of [180]."
    ],
    "error_type": "value_error:others",
    "prompt": {
        "id": "simple_293",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Create a mix track using notes of C major scale and duration of each note being quarter of a second with a duration of 3 minutes."
                }
            ]
        ],
        "function": [
            {
                "name": "music_composer.create_mix",
                "description": "Create a mix of a song based on a particular music scale and duration",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "scale": {
                            "type": "string",
                            "description": "The musical scale to be used. E.g: C Major, A Minor, etc."
                        },
                        "note_duration": {
                            "type": "string",
                            "description": "Duration of each note. Options: 'whole', 'half', 'quarter', 'eighth', 'sixteenth'.",
                            "enum": [
                                "whole",
                                "half",
                                "quarter",
                                "eighth",
                                "sixteenth"
                            ]
                        },
                        "track_length": {
                            "type": "integer",
                            "description": "Length of the mix track in seconds."
                        }
                    },
                    "required": [
                        "scale",
                        "note_duration",
                        "track_length"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"music_composer.create_mix\", \"arguments\": {\"scale\": \"C Major\", \"note_duration\": \"quarter\", \"track_length\": 1800}}]\n",
    "model_result_decoded": [
        {
            "music_composer.create_mix": {
                "scale": "C Major",
                "note_duration": "quarter",
                "track_length": 1800
            }
        }
    ],
    "possible_answer": [
        {
            "music_composer.create_mix": {
                "scale": [
                    "C Major"
                ],
                "note_duration": [
                    "quarter"
                ],
                "track_length": [
                    180
                ]
            }
        }
    ]
}
{
    "id": 295,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Unexpected parameter: 'type'."
    ],
    "error_type": "simple_function_checker:unexpected_param",
    "prompt": {
        "id": "simple_294",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Generate a major chord progression in C key with four chords."
                }
            ]
        ],
        "function": [
            {
                "name": "music_generation.create_chord_progression",
                "description": "Create a chord progression in a specific key and number of chords.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "key": {
                            "type": "string",
                            "description": "The key for the chord progression."
                        },
                        "chords": {
                            "type": "integer",
                            "description": "Number of chords in the progression."
                        },
                        "progression_type": {
                            "type": "string",
                            "description": "The type of the chord progression. Optional parameter. Default is 'major'."
                        }
                    },
                    "required": [
                        "key",
                        "chords"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"music_generation.create_chord_progression\", \"arguments\": {\"type\": \"major\", \"chords\": 4, \"key\": \"C\"}}]\n",
    "model_result_decoded": [
        {
            "music_generation.create_chord_progression": {
                "type": "major",
                "chords": 4,
                "key": "C"
            }
        }
    ],
    "possible_answer": [
        {
            "music_generation.create_chord_progression": {
                "key": [
                    "C"
                ],
                "chords": [
                    4
                ],
                "progression_type": [
                    "major",
                    ""
                ]
            }
        }
    ]
}
{
    "id": 297,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Unexpected parameter: 'type'."
    ],
    "error_type": "simple_function_checker:unexpected_param",
    "prompt": {
        "id": "simple_296",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Generate a major C scale progression with tempo 80 BPM and duration 4 beats."
                }
            ]
        ],
        "function": [
            {
                "name": "music_generator.generate_scale_progression",
                "description": "Generate a music scale progression in a specific key with a given tempo and duration.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "key": {
                            "type": "string",
                            "description": "The key in which to generate the scale progression."
                        },
                        "tempo": {
                            "type": "integer",
                            "description": "The tempo of the scale progression in BPM."
                        },
                        "duration": {
                            "type": "integer",
                            "description": "The duration of each note in beats."
                        },
                        "scale_type": {
                            "type": "string",
                            "default": "major",
                            "description": "The type of scale to generate. Defaults to 'major'."
                        }
                    },
                    "required": [
                        "key",
                        "tempo",
                        "duration"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"music_generator.generate_scale_progression\", \"arguments\": {\"type\": \"major\", \"key\": \"C\", \"tempo\": 80, \"duration\": 4}}]\n",
    "model_result_decoded": [
        {
            "music_generator.generate_scale_progression": {
                "type": "major",
                "key": "C",
                "tempo": 80,
                "duration": 4
            }
        }
    ],
    "possible_answer": [
        {
            "music_generator.generate_scale_progression": {
                "key": [
                    "C"
                ],
                "tempo": [
                    80
                ],
                "duration": [
                    4
                ],
                "scale_type": [
                    "major",
                    ""
                ]
            }
        }
    ]
}
{
    "id": 300,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Missing required parameter: 'key'."
    ],
    "error_type": "simple_function_checker:missing_required",
    "prompt": {
        "id": "simple_299",
        "question": [
            [
                {
                    "role": "user",
                    "content": "What is the musical scale associated with C sharp major?"
                }
            ]
        ],
        "function": [
            {
                "name": "musical_scale",
                "description": "Get the musical scale of a specific key in music theory.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "key": {
                            "type": "string",
                            "description": "The musical key for which the scale will be found."
                        },
                        "scale_type": {
                            "type": "string",
                            "default": "major",
                            "description": "The type of musical scale."
                        }
                    },
                    "required": [
                        "key"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"musical_scale\", \"arguments\": {\"type\": \"C sharp major\"}}]\n",
    "model_result_decoded": [
        {
            "musical_scale": {
                "type": "C sharp major"
            }
        }
    ],
    "possible_answer": [
        {
            "musical_scale": {
                "key": [
                    "C#",
                    "C sharp"
                ],
                "scale_type": [
                    "major",
                    ""
                ]
            }
        }
    ]
}
{
    "id": 302,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Missing required parameter: 'key'."
    ],
    "error_type": "simple_function_checker:missing_required",
    "prompt": {
        "id": "simple_301",
        "question": [
            [
                {
                    "role": "user",
                    "content": "What is the third major chord in C major scale?"
                }
            ]
        ],
        "function": [
            {
                "name": "get_third_chord",
                "description": "Calculate the third major chord in a given key.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "key": {
                            "type": "string",
                            "description": "The key of the scale."
                        },
                        "type": {
                            "type": "string",
                            "description": "Type of the scale, either major or minor. Default is 'major'."
                        }
                    },
                    "required": [
                        "key"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"get_third_chord\", \"arguments\": {\"type\": \"c_major\"}}]\n",
    "model_result_decoded": [
        {
            "get_third_chord": {
                "type": "c_major"
            }
        }
    ],
    "possible_answer": [
        {
            "get_third_chord": {
                "key": [
                    "C"
                ],
                "type": [
                    "major",
                    ""
                ]
            }
        }
    ]
}
{
    "id": 304,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'league': 'all'. Expected one of ['']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_303",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Get the player stats of Cristiano Ronaldo in the 2019-2020 season"
                }
            ]
        ],
        "function": [
            {
                "name": "soccer_stat.get_player_stats",
                "description": "Retrieve soccer player statistics for a given season.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "player_name": {
                            "type": "string",
                            "description": "Name of the player."
                        },
                        "season": {
                            "type": "string",
                            "description": "Soccer season, usually specified by two years."
                        },
                        "league": {
                            "type": "string",
                            "description": "Optional - the soccer league, defaults to all leagues if not specified."
                        }
                    },
                    "required": [
                        "player_name",
                        "season"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"soccer_stat.get_player_stats\", \"arguments\": {\"player_name\": \"Cristiano Ronaldo\", \"season\": \"2019-2020\", \"league\": \"all\"}}]\n",
    "model_result_decoded": [
        {
            "soccer_stat.get_player_stats": {
                "player_name": "Cristiano Ronaldo",
                "season": "2019-2020",
                "league": "all"
            }
        }
    ],
    "possible_answer": [
        {
            "soccer_stat.get_player_stats": {
                "player_name": [
                    "Cristiano Ronaldo"
                ],
                "season": [
                    "2019-2020"
                ],
                "league": [
                    ""
                ]
            }
        }
    ]
}
{
    "id": 305,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Optional parameter 'metrics' not provided and not marked as optional."
    ],
    "error_type": "simple_function_checker:missing_optional",
    "prompt": {
        "id": "simple_304",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Get point and rebound stats for player 'LeBron James' from last basketball game"
                }
            ]
        ],
        "function": [
            {
                "name": "player_stats.getLastGame",
                "description": "Get last game statistics for a specific player in basketball",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "player_name": {
                            "type": "string",
                            "description": "The name of the basketball player."
                        },
                        "team": {
                            "type": "string",
                            "description": "The team that player currently plays for."
                        },
                        "metrics": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Points",
                                    "Rebounds",
                                    "Assists",
                                    "Blocks"
                                ]
                            },
                            "description": "Specific metrics to retrieve. If no value is specified, all available metrics will be returned by default."
                        }
                    },
                    "required": [
                        "player_name",
                        "team"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"player_stats.getLastGame\", \"arguments\": {\"player_name\": \"LeBron James\", \"team\": \"Lakers\"}}]\n",
    "model_result_decoded": [
        {
            "player_stats.getLastGame": {
                "player_name": "LeBron James",
                "team": "Lakers"
            }
        }
    ],
    "possible_answer": [
        {
            "player_stats.getLastGame": {
                "player_name": [
                    "LeBron James"
                ],
                "team": [
                    "Los Angeles Lakers",
                    "LAL",
                    "Lakers"
                ],
                "metrics": [
                    [
                        "Points",
                        "Rebounds"
                    ]
                ]
            }
        }
    ]
}
{
    "id": 306,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'tournament': 'La Liga 2020-2021'. Expected one of ['La Liga']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_305",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Calculate the overall goal and assist of soccer player Messi in La Liga 2020-2021 season"
                }
            ]
        ],
        "function": [
            {
                "name": "sports_stats.get_performance",
                "description": "Compute the performance score of a soccer player given his game stats for a specific tournament in a season.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "player_name": {
                            "type": "string",
                            "description": "Name of the player."
                        },
                        "tournament": {
                            "type": "string",
                            "description": "Name of the soccer tournament."
                        },
                        "season": {
                            "type": "string",
                            "description": "Specific season in format 'YYYY-YYYY'."
                        },
                        "performance_indicator": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Goals Scored",
                                    "Assists Made",
                                    "Saves Made",
                                    "Cards Received"
                                ]
                            },
                            "description": "Array of performance indicators. Use as much as possible. Default to use all if not specified."
                        }
                    },
                    "required": [
                        "player_name",
                        "tournament",
                        "season"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"sports_stats.get_performance\", \"arguments\": {\"player_name\": \"Messi\", \"tournament\": \"La Liga 2020-2021\", \"season\": \"2020-2021\"}}]\n",
    "model_result_decoded": [
        {
            "sports_stats.get_performance": {
                "player_name": "Messi",
                "tournament": "La Liga 2020-2021",
                "season": "2020-2021"
            }
        }
    ],
    "possible_answer": [
        {
            "sports_stats.get_performance": {
                "player_name": [
                    "Messi",
                    "Lionel Messi"
                ],
                "tournament": [
                    "La Liga"
                ],
                "season": [
                    "2020-2021"
                ],
                "performance_indicator": [
                    [
                        "Goals Scored",
                        "Assists Made"
                    ]
                ]
            }
        }
    ]
}
{
    "id": 310,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'team': 'New England'. Expected one of ['', 'Tampa Bay Buccaneers']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_309",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find me the record of Tom Brady in the 2020 NFL season."
                }
            ]
        ],
        "function": [
            {
                "name": "nfl_data.player_record",
                "description": "Retrieve the record of an NFL player in a specified season.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "player_name": {
                            "type": "string",
                            "description": "The name of the NFL player."
                        },
                        "season_year": {
                            "type": "integer",
                            "description": "The year of the NFL season."
                        },
                        "team": {
                            "type": "string",
                            "description": "The NFL team that the player played for in that season. Default is all teams if not specified."
                        }
                    },
                    "required": [
                        "player_name",
                        "season_year"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"nfl_data.player_record\", \"arguments\": {\"player_name\": \"Tom Brady\", \"season_year\": 2020, \"team\": \"New England\"}}]\n",
    "model_result_decoded": [
        {
            "nfl_data.player_record": {
                "player_name": "Tom Brady",
                "season_year": 2020,
                "team": "New England"
            }
        }
    ],
    "possible_answer": [
        {
            "nfl_data.player_record": {
                "player_name": [
                    "Tom Brady"
                ],
                "season_year": [
                    2020
                ],
                "team": [
                    "",
                    "Tampa Bay Buccaneers"
                ]
            }
        }
    ]
}
{
    "id": 313,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'team_name': 'FC Barcelona'. Expected one of ['']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_312",
        "question": [
            [
                {
                    "role": "user",
                    "content": "What are the statistics of Ronaldo's matches in 2021?"
                }
            ]
        ],
        "function": [
            {
                "name": "player_statistic",
                "description": "Retrieves detailed player's statistics for a specific year.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "player_name": {
                            "type": "string",
                            "description": "The player's name."
                        },
                        "year": {
                            "type": "integer",
                            "description": "Year for which the statistics will be displayed."
                        },
                        "team_name": {
                            "type": "string",
                            "description": "The name of the team(optional). Default to not use it if not specified."
                        }
                    },
                    "required": [
                        "player_name",
                        "year"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"player_statistic\", \"arguments\": {\"player_name\": \"Ronaldo\", \"year\": 2021, \"team_name\": \"FC Barcelona\"}}]\n",
    "model_result_decoded": [
        {
            "player_statistic": {
                "player_name": "Ronaldo",
                "year": 2021,
                "team_name": "FC Barcelona"
            }
        }
    ],
    "possible_answer": [
        {
            "player_statistic": {
                "player_name": [
                    "Ronaldo",
                    "Cristiano Ronaldo"
                ],
                "year": [
                    2021
                ],
                "team_name": [
                    ""
                ]
            }
        }
    ]
}
{
    "id": 318,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Missing required parameter: 'team_name'."
    ],
    "error_type": "simple_function_checker:missing_required",
    "prompt": {
        "id": "simple_317",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find the ranking of LA Lakers in the NBA 2021 regular season."
                }
            ]
        ],
        "function": [
            {
                "name": "get_team_rank",
                "description": "Get the team ranking in a sports league based on season and type.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "team_name": {
                            "type": "string",
                            "description": "The name of the sports team."
                        },
                        "league": {
                            "type": "string",
                            "description": "The name of the league in which the team competes."
                        },
                        "season": {
                            "type": "string",
                            "description": "The season for which the team's ranking is sought."
                        },
                        "type": {
                            "type": "string",
                            "description": "Type of the season: regular or playoff.",
                            "enum": [
                                "regular",
                                "playoff"
                            ]
                        }
                    },
                    "required": [
                        "team_name",
                        "league",
                        "season",
                        "type"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"get_team_rank\", \"arguments\": {\"type\": \"LA Lakers\", \"league\": \"NBA 2021\", \"season\": \"2021\", \"type\": \"regular\"}}]\n",
    "model_result_decoded": [
        {
            "get_team_rank": {
                "type": "regular",
                "league": "NBA 2021",
                "season": "2021"
            }
        }
    ],
    "possible_answer": [
        {
            "get_team_rank": {
                "team_name": [
                    "LA Lakers"
                ],
                "league": [
                    "NBA"
                ],
                "season": [
                    "2021"
                ],
                "type": [
                    "regular"
                ]
            }
        }
    ]
}
{
    "id": 321,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Missing required parameter: 'team'."
    ],
    "error_type": "simple_function_checker:missing_required",
    "prompt": {
        "id": "simple_320",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Fetch the basketball league standings, where Golden State Warriors stand in current 2022-2023 season with details"
                }
            ]
        ],
        "function": [
            {
                "name": "sports_ranking.get_team_position",
                "description": "Retrieve a team's position and stats in the basketball league for a given season.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "team": {
                            "type": "string",
                            "description": "The name of the team."
                        },
                        "season": {
                            "type": "string",
                            "description": "The season for which data should be fetched."
                        },
                        "detailed": {
                            "type": "boolean",
                            "description": "Flag to retrieve detailed stats or just the position.",
                            "default": false
                        }
                    },
                    "required": [
                        "team",
                        "season"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"sports_ranking.get_team_position\", \"arguments\": {\"type\": \"Golden State Warriors\", \"season\": \"2022-2023\", \"detailed\": true}}]\n",
    "model_result_decoded": [
        {
            "sports_ranking.get_team_position": {
                "type": "Golden State Warriors",
                "season": "2022-2023",
                "detailed": true
            }
        }
    ],
    "possible_answer": [
        {
            "sports_ranking.get_team_position": {
                "team": [
                    "Golden State Warriors",
                    "GSW"
                ],
                "season": [
                    "2022-2023"
                ],
                "detailed": [
                    true
                ]
            }
        }
    ]
}
{
    "id": 324,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'sport': 'women'. Expected one of ['tennis']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_323",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Who is ranked as the top player in woman tennis?"
                }
            ]
        ],
        "function": [
            {
                "name": "sports_ranking.get_top_player",
                "description": "Get the top player in a specific sport.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "sport": {
                            "type": "string",
                            "description": "The type of sport."
                        },
                        "gender": {
                            "type": "string",
                            "description": "The gender of the sport category. Optional.",
                            "default": "men"
                        }
                    },
                    "required": [
                        "sport"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"sports_ranking.get_top_player\", \"arguments\": {\"sport\": \"women\", \"gender\": \"female\"}}]\n",
    "model_result_decoded": [
        {
            "sports_ranking.get_top_player": {
                "sport": "women",
                "gender": "female"
            }
        }
    ],
    "possible_answer": [
        {
            "sports_ranking.get_top_player": {
                "sport": [
                    "tennis"
                ],
                "gender": [
                    "women"
                ]
            }
        }
    ]
}
{
    "id": 325,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Missing required parameter: 'team'."
    ],
    "error_type": "simple_function_checker:missing_required",
    "prompt": {
        "id": "simple_324",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find the score of last game for Los Angeles Lakers including its opponent name."
                }
            ]
        ],
        "function": [
            {
                "name": "team_score.get_latest",
                "description": "Retrieve the score of the most recent game for a specified sports team.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "team": {
                            "type": "string",
                            "description": "Name of the sports team."
                        },
                        "include_opponent": {
                            "type": "boolean",
                            "description": "Include the name of the opponent team in the return.",
                            "default": false
                        }
                    },
                    "required": [
                        "team"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"team_score.get_latest\", \"arguments\": {\"type\": \"Los Angeles Lakers\", \"include_opponent\": true}}]\n",
    "model_result_decoded": [
        {
            "team_score.get_latest": {
                "type": "Los Angeles Lakers",
                "include_opponent": true
            }
        }
    ],
    "possible_answer": [
        {
            "team_score.get_latest": {
                "team": [
                    "Los Angeles Lakers",
                    "Lakers"
                ],
                "include_opponent": [
                    true
                ]
            }
        }
    ]
}
{
    "id": 326,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'season': '2022'. Expected one of ['']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_325",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Who won the last match between Chicago Bulls and Los Angeles Lakers?"
                }
            ]
        ],
        "function": [
            {
                "name": "sports.match_results",
                "description": "Returns the results of a given match between two teams.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "team1": {
                            "type": "string",
                            "description": "The name of the first team."
                        },
                        "team2": {
                            "type": "string",
                            "description": "The name of the second team."
                        },
                        "season": {
                            "type": "string",
                            "description": "The season when the match happened. Default is the current season."
                        }
                    },
                    "required": [
                        "team1",
                        "team2"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"sports.match_results\", \"arguments\": {\"team1\": \"Chicago Bulls\", \"team2\": \"Los Angeles Lakers\", \"season\": \"2022\"}}]\n",
    "model_result_decoded": [
        {
            "sports.match_results": {
                "team1": "Chicago Bulls",
                "team2": "Los Angeles Lakers",
                "season": "2022"
            }
        }
    ],
    "possible_answer": [
        {
            "sports.match_results": {
                "team1": [
                    "Chicago Bulls"
                ],
                "team2": [
                    "Los Angeles Lakers"
                ],
                "season": [
                    ""
                ]
            }
        }
    ]
}
{
    "id": 329,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid syntax. Failed to decode AST. Expecting ',' delimiter: line 1 column 165 (char 164)"
    ],
    "error_type": "ast_decoder:decoder_failed",
    "prompt": {
        "id": "simple_328",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find the rating and player count of the board game 'Ticket to Ride'."
                }
            ]
        ],
        "function": [
            {
                "name": "boardgame.get_info",
                "description": "Retrieve detailed information of a board game.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Name of the board game."
                        },
                        "parameters": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "player count",
                                    "playing time",
                                    "age",
                                    "mechanics",
                                    "rating"
                                ]
                            },
                            "description": "Game characteristics interested."
                        },
                        "language": {
                            "type": "string",
                            "description": "The preferred language for the game information, default is English"
                        }
                    },
                    "required": [
                        "name",
                        "parameters"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"boardgame.get_info\", \"arguments\": {\"name\": \"Ticket to Ride\", \"parameters\": {\"type\": \"player count\", \"description\": \"The number of players in the game.\"}}]\n",
    "possible_answer": [
        {
            "boardgame.get_info": {
                "name": [
                    "Ticket to Ride"
                ],
                "parameters": [
                    [
                        "rating",
                        "player count"
                    ],
                    [
                        "player count",
                        "rating"
                    ]
                ],
                "language": [
                    "",
                    "English"
                ]
            }
        }
    ]
}
{
    "id": 336,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid syntax. Failed to decode AST. Expecting ',' delimiter: line 1 column 199 (char 198)"
    ],
    "error_type": "ast_decoder:decoder_failed",
    "prompt": {
        "id": "simple_335",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find a Card of rank 'Queen' and suit 'Hearts' in the deck."
                }
            ]
        ],
        "function": [
            {
                "name": "find_card_in_deck",
                "description": "Locate a particular card in a deck based on rank and suit.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "rank": {
                            "type": "string",
                            "description": "Rank of the card (e.g. Ace, Two, King)."
                        },
                        "suit": {
                            "type": "string",
                            "description": "Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs)."
                        },
                        "deck": {
                            "type": "array",
                            "items": {
                                "type": "dict",
                                "properties": {
                                    "rank": {
                                        "type": "string"
                                    },
                                    "suit": {
                                        "type": "string"
                                    }
                                }
                            },
                            "description": "Deck of cards. If not provided, the deck will be a standard 52 card deck"
                        }
                    },
                    "required": [
                        "rank",
                        "suit"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"find_card_in_deck\", \"arguments\": {\"rank\": \"Queen\", \"suit\": \"Hearts\", \"deck\": {\"type\": \"array\", \"items\": {\"type\": \"dict\", \"properties\": {\"rank\": {\"type\": \"str\"}, \"suit\": {\"type\": \"str\"}}}}]\n",
    "possible_answer": [
        {
            "find_card_in_deck": {
                "rank": [
                    "Queen"
                ],
                "suit": [
                    "Hearts"
                ],
                "deck": [
                    ""
                ]
            }
        }
    ]
}
{
    "id": 338,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid syntax. Failed to decode AST. Expecting ':' delimiter: line 1 column 166 (char 165)"
    ],
    "error_type": "ast_decoder:decoder_failed",
    "prompt": {
        "id": "simple_337",
        "question": [
            [
                {
                    "role": "user",
                    "content": "In a texas holdem game, Who won in the poker game with players Alex, Sam, Robert and Steve given the cards Alex':['A of spades', 'K of spades'], 'Sam': ['2 of diamonds', '3 of clubs'], 'Robert': ['Q of hearts', '10 of hearts'], 'Steve': ['4 of spades', '5 of spades']?"
                }
            ]
        ],
        "function": [
            {
                "name": "poker_game_winner",
                "description": "Identify the winner in a poker game based on the cards.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "players": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Names of the players in a list."
                        },
                        "cards": {
                            "type": "dict",
                            "description": "An object containing the player name as key and the cards as values in a list."
                        },
                        "type": {
                            "type": "string",
                            "description": "Type of poker game. Defaults to 'Texas Holdem'"
                        }
                    },
                    "required": [
                        "players",
                        "cards"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"poker_game_winner\", \"arguments\": {\"players\": [\"Alex\", \"Sam\", \"Robert\", \"Steve\"], \"cards\": {\"Alex\": [\"A of spades\", \"K of spades\"], \"Sam\": {\"2 of diamonds\", \"3 of clubs\"}, \"Robert\": {\"Q of hearts\", \"10 of hearts\"}, \"Steve\": {\"4 of spades\", \"5 of spades\"}}]\n",
    "possible_answer": [
        {
            "poker_game_winner": {
                "players": [
                    [
                        "Alex",
                        "Sam",
                        "Robert",
                        "Steve"
                    ]
                ],
                "cards": [
                    {
                        "Alex": [
                            [
                                "A of spades",
                                "K of spades"
                            ]
                        ],
                        "Sam": [
                            [
                                "2 of diamonds",
                                "3 of clubs"
                            ]
                        ],
                        "Robert": [
                            [
                                "Q of hearts",
                                "10 of hearts"
                            ]
                        ],
                        "Steve": [
                            [
                                "4 of spades",
                                "5 of spades"
                            ]
                        ]
                    }
                ],
                "type": [
                    "Texas Holdem",
                    ""
                ]
            }
        }
    ]
}
{
    "id": 346,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Missing required parameter: 'game_name'."
    ],
    "error_type": "simple_function_checker:missing_required",
    "prompt": {
        "id": "simple_345",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find the value of a vintage Super Mario Bros. game from 1985 like new."
                }
            ]
        ],
        "function": [
            {
                "name": "game_valuation",
                "description": "Get the current market value of a vintage video game.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "game_name": {
                            "type": "string",
                            "description": "The name of the game."
                        },
                        "release_year": {
                            "type": "integer",
                            "description": "The year the game was released."
                        },
                        "condition": {
                            "type": "string",
                            "enum": [
                                "New",
                                "Like New",
                                "Used",
                                "Fair",
                                "Poor"
                            ],
                            "description": "The condition of the game. Default is 'Used'."
                        }
                    },
                    "required": [
                        "game_name",
                        "release_year"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"game_valuation\", \"arguments\": {\"type\": \"Super Mario Bros. 1985\", \"release_year\": 1985, \"condition\": \"Like New\"}}]\n",
    "model_result_decoded": [
        {
            "game_valuation": {
                "type": "Super Mario Bros. 1985",
                "release_year": 1985,
                "condition": "Like New"
            }
        }
    ],
    "possible_answer": [
        {
            "game_valuation": {
                "game_name": [
                    "Super Mario Bros."
                ],
                "release_year": [
                    1985
                ],
                "condition": [
                    "Like New",
                    "New"
                ]
            }
        }
    ]
}
{
    "id": 358,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Optional parameter 'diet_preference' not provided and not marked as optional."
    ],
    "error_type": "simple_function_checker:missing_optional",
    "prompt": {
        "id": "simple_357",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Get the recipe for vegan chocolate cake including the steps for preparation."
                }
            ]
        ],
        "function": [
            {
                "name": "get_recipe",
                "description": "Fetch the recipe for a specific dish along with preparation steps.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "dish_name": {
                            "type": "string",
                            "description": "Name of the dish whose recipe needs to be fetched."
                        },
                        "diet_preference": {
                            "type": "string",
                            "description": "Preferred dietary consideration like vegan, vegetarian, gluten-free etc. Default is none.",
                            "default": "none"
                        }
                    },
                    "required": [
                        "dish_name"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"get_recipe\", \"arguments\": {\"dish_name\": \"vegan chocolate cake\"}}]\n",
    "model_result_decoded": [
        {
            "get_recipe": {
                "dish_name": "vegan chocolate cake"
            }
        }
    ],
    "possible_answer": [
        {
            "get_recipe": {
                "dish_name": [
                    "chocolate cake",
                    "vegan chocolate cake"
                ],
                "diet_preference": [
                    "vegan"
                ]
            }
        }
    ]
}
{
    "id": 363,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid syntax. Failed to decode AST. Expecting ',' delimiter: line 1 column 105 (char 104)"
    ],
    "error_type": "ast_decoder:decoder_failed",
    "prompt": {
        "id": "simple_362",
        "question": [
            [
                {
                    "role": "user",
                    "content": "What are the top five sushi restaurants with high reviews i.e. above 4/5 in Tokyo?"
                }
            ]
        ],
        "function": [
            {
                "name": "get_best_sushi_places",
                "description": "Returns the best sushi places given the city, review_rate and top number.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "city": {
                            "type": "string",
                            "description": "The city in which to look for the sushi places."
                        },
                        "top": {
                            "type": "integer",
                            "description": "The number of top sushi places to be returned."
                        },
                        "review_rate": {
                            "type": "float",
                            "description": "The review rating to filter the sushi places. Places with review ratings above this value will be returned. Default 0.00."
                        }
                    },
                    "required": [
                        "city",
                        "top"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"get_best_sushi_places\", \"arguments\": {\"city\": \"Tokyo\", \"top\": 5, \"review_rate\": {\"$gt\": 4.0}}]\n",
    "possible_answer": [
        {
            "get_best_sushi_places": {
                "city": [
                    "Tokyo"
                ],
                "top": [
                    5
                ],
                "review_rate": [
                    4.0
                ]
            }
        }
    ]
}
{
    "id": 364,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'amenities': ['Patio', 'Wheelchair Accessible']. Expected one of [['Patio']]."
    ],
    "error_type": "value_error:list/tuple",
    "prompt": {
        "id": "simple_363",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find the closest sushi restaurant with a patio in Boston."
                }
            ]
        ],
        "function": [
            {
                "name": "restaurant_search.find_closest",
                "description": "Locate the closest sushi restaurant based on certain criteria, such as the presence of a patio.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "The city, for instance Boston, MA"
                        },
                        "cuisine": {
                            "type": "string",
                            "description": "Type of food like Sushi."
                        },
                        "amenities": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Patio",
                                    "Wi-Fi",
                                    "Happy Hour",
                                    "Wheelchair Accessible"
                                ]
                            },
                            "description": "Preferred amenities in the restaurant. Default 'Wi-Fi'."
                        }
                    },
                    "required": [
                        "location",
                        "cuisine"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"restaurant_search.find_closest\", \"arguments\": {\"location\": \"Boston\", \"cuisine\": \"Sushi\", \"amenities\": [\"Patio\", \"Wheelchair Accessible\"]}}]\n",
    "model_result_decoded": [
        {
            "restaurant_search.find_closest": {
                "location": "Boston",
                "cuisine": "Sushi",
                "amenities": [
                    "Patio",
                    "Wheelchair Accessible"
                ]
            }
        }
    ],
    "possible_answer": [
        {
            "find_closest": {
                "location": [
                    "Boston",
                    "Boston, MA"
                ],
                "cuisine": [
                    "Sushi",
                    "sushi"
                ],
                "amenities": [
                    [
                        "Patio"
                    ]
                ]
            }
        }
    ]
}
{
    "id": 367,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid syntax. Failed to decode AST. Expecting ',' delimiter: line 1 column 143 (char 142)"
    ],
    "error_type": "ast_decoder:decoder_failed",
    "prompt": {
        "id": "simple_366",
        "question": [
            [
                {
                    "role": "user",
                    "content": "How many teaspoons are in 2 tablespoons for measurement in my recipe?"
                }
            ]
        ],
        "function": [
            {
                "name": "recipe.unit_conversion",
                "description": "Convert a value from one kitchen unit to another for cooking purposes.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "value": {
                            "type": "integer",
                            "description": "The value to be converted."
                        },
                        "from_unit": {
                            "type": "string",
                            "description": "The unit to convert from. Supports 'teaspoon', 'tablespoon', 'cup', etc."
                        },
                        "to_unit": {
                            "type": "string",
                            "description": "The unit to convert to. Supports 'teaspoon', 'tablespoon', 'cup', etc."
                        },
                        "precision": {
                            "type": "integer",
                            "description": "The precision to round the output to, in case of a non-integer result. Optional, default is 1."
                        }
                    },
                    "required": [
                        "value",
                        "from_unit",
                        "to_unit"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"recipe.unit_conversion\", \"arguments\": {\"type\": \"int\", \"properties\": {\"value\": 2, \"from_unit\": \"tablespoon\", \"to_unit\": \"teaspoon\"}}]\n",
    "possible_answer": [
        {
            "recipe.unit_conversion": {
                "value": [
                    2
                ],
                "from_unit": [
                    "tablespoon",
                    "tbsp"
                ],
                "to_unit": [
                    "teaspoon",
                    "tsp"
                ],
                "precision": [
                    1,
                    ""
                ]
            }
        }
    ]
}
{
    "id": 368,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'recipe_type': 'brownie'. Expected one of ['dessert']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_367",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find me a vegan recipe for brownies which prep time is under 30 minutes."
                }
            ]
        ],
        "function": [
            {
                "name": "find_recipe",
                "description": "Find a recipe based on the dietary restrictions, recipe type, and time constraints.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "dietary_restrictions": {
                            "type": "string",
                            "description": "Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free."
                        },
                        "recipe_type": {
                            "type": "string",
                            "description": "Type of the recipe. E.g. dessert, main course, breakfast."
                        },
                        "time": {
                            "type": "integer",
                            "description": "Time limit in minutes to prep the meal."
                        }
                    },
                    "required": [
                        "dietary_restrictions",
                        "recipe_type",
                        "time"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"find_recipe\", \"arguments\": {\"dietary_restrictions\": \"vegan\", \"recipe_type\": \"brownie\", \"time\": 30}}]\n",
    "model_result_decoded": [
        {
            "find_recipe": {
                "dietary_restrictions": "vegan",
                "recipe_type": "brownie",
                "time": 30
            }
        }
    ],
    "possible_answer": [
        {
            "find_recipe": {
                "dietary_restrictions": [
                    "vegan"
                ],
                "recipe_type": [
                    "dessert"
                ],
                "time": [
                    30
                ]
            }
        }
    ]
}
{
    "id": 370,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'categories': ['Organic', 'Vegetables', 'Fruits', 'Dairy', 'Seafood', 'Bakery']. Expected one of [['Organic', 'Vegetables', 'Fruits'], ['Organic', 'Fruits', 'Vegetables'], ['Vegetables', 'Fruits', 'Organic'], ['Fruits', 'Vegetables', 'Organic'], ['Fruits', 'Organic', 'Vegetables'], ['Vegetables', 'Organic', 'Fruits']]."
    ],
    "error_type": "value_error:list/tuple",
    "prompt": {
        "id": "simple_369",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Find a grocery store near me with organic fruits and vegetables in Houston."
                }
            ]
        ],
        "function": [
            {
                "name": "grocery_store.find_nearby",
                "description": "Locate nearby grocery stores based on specific criteria like organic fruits and vegetables.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "The city and state, e.g. Houston, TX"
                        },
                        "categories": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Organic",
                                    "Vegetables",
                                    "Fruits",
                                    "Dairy",
                                    "Seafood",
                                    "Bakery"
                                ]
                            },
                            "description": "Categories of items to be found in the grocery store. Default is all if not specified."
                        }
                    },
                    "required": [
                        "location"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"grocery_store.find_nearby\", \"arguments\": {\"location\": \"Houston\", \"categories\": [\"Organic\", \"Vegetables\", \"Fruits\", \"Dairy\", \"Seafood\", \"Bakery\"]}}]\n",
    "model_result_decoded": [
        {
            "grocery_store.find_nearby": {
                "location": "Houston",
                "categories": [
                    "Organic",
                    "Vegetables",
                    "Fruits",
                    "Dairy",
                    "Seafood",
                    "Bakery"
                ]
            }
        }
    ],
    "possible_answer": [
        {
            "grocery_store.find_nearby": {
                "location": [
                    "Houston",
                    "Houston, TX"
                ],
                "categories": [
                    [
                        "Organic",
                        "Vegetables",
                        "Fruits"
                    ],
                    [
                        "Organic",
                        "Fruits",
                        "Vegetables"
                    ],
                    [
                        "Vegetables",
                        "Fruits",
                        "Organic"
                    ],
                    [
                        "Fruits",
                        "Vegetables",
                        "Organic"
                    ],
                    [
                        "Fruits",
                        "Organic",
                        "Vegetables"
                    ],
                    [
                        "Vegetables",
                        "Organic",
                        "Fruits"
                    ]
                ]
            }
        }
    ]
}
{
    "id": 371,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'quantity': [3, 5]. Expected one of [[3, 1]]."
    ],
    "error_type": "value_error:list/tuple",
    "prompt": {
        "id": "simple_370",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto."
                }
            ]
        ],
        "function": [
            {
                "name": "safeway.order",
                "description": "Order specified items from a Safeway location.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "The location of the Safeway store, e.g. Palo Alto, CA."
                        },
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of items to order."
                        },
                        "quantity": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "description": "Quantity of each item in the order list."
                        }
                    },
                    "required": [
                        "location",
                        "items",
                        "quantity"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"safeway.order\", \"arguments\": {\"location\": \"Palo Alto\", \"items\": [\"olive oil\", \"rice\"], \"quantity\": [3, 5]}}]\n",
    "model_result_decoded": [
        {
            "safeway.order": {
                "location": "Palo Alto",
                "items": [
                    "olive oil",
                    "rice"
                ],
                "quantity": [
                    3,
                    5
                ]
            }
        }
    ],
    "possible_answer": [
        {
            "safeway.order": {
                "location": [
                    "Palo Alto",
                    "Palo Alto, CA"
                ],
                "items": [
                    [
                        "olive oil",
                        "rice"
                    ],
                    [
                        "olive oil",
                        "bag of rice"
                    ]
                ],
                "quantity": [
                    [
                        3,
                        1
                    ]
                ]
            }
        }
    ]
}
{
    "id": 374,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid syntax. Failed to decode AST. Expecting ',' delimiter: line 1 column 178 (char 177)"
    ],
    "error_type": "ast_decoder:decoder_failed",
    "prompt": {
        "id": "simple_373",
        "question": [
            [
                {
                    "role": "user",
                    "content": "I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability."
                }
            ]
        ],
        "function": [
            {
                "name": "walmart.purchase",
                "description": "Retrieve information of items from Walmart including stock availability.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "loc": {
                            "type": "string",
                            "description": "Location of the nearest Walmart."
                        },
                        "product_list": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Items to be purchased listed in an array."
                        },
                        "pack_size": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "description": "Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified."
                        }
                    },
                    "required": [
                        "loc",
                        "product_list"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"walmart.purchase\", \"arguments\": {\"type\": \"dict\", \"properties\": {\"loc\": \"San Jose\", \"product_list\": [\"apples\", \"rice\", \"12 pack of bottled water\"], \"pack_size\": [12]}}]\n",
    "possible_answer": [
        {
            "walmart.purchase": {
                "loc": [
                    "San Jose",
                    "San Jose, CA"
                ],
                "product_list": [
                    [
                        "apples",
                        "rice",
                        "bottled water"
                    ],
                    [
                        "apples",
                        "rice",
                        "water"
                    ]
                ],
                "pack_size": [
                    [
                        1,
                        1,
                        12
                    ]
                ]
            }
        }
    ]
}
{
    "id": 376,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'store_location': 'all'. Expected one of ['']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_375",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Check the total price for three pumpkins and two dozen eggs at Walmart."
                }
            ]
        ],
        "function": [
            {
                "name": "walmart.check_price",
                "description": "Calculate total price for given items and their quantities at Walmart.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of items to be priced."
                        },
                        "quantities": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "description": "Quantity of each item corresponding to the items list."
                        },
                        "store_location": {
                            "type": "string",
                            "description": "The store location for specific pricing (optional). Default to all if not specified."
                        }
                    },
                    "required": [
                        "items",
                        "quantities"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"walmart.check_price\", \"arguments\": {\"items\": [\"pumpkins\", \"eggs\"], \"quantities\": [3, 2], \"store_location\": \"all\"}}]\n",
    "model_result_decoded": [
        {
            "walmart.check_price": {
                "items": [
                    "pumpkins",
                    "eggs"
                ],
                "quantities": [
                    3,
                    2
                ],
                "store_location": "all"
            }
        }
    ],
    "possible_answer": [
        {
            "walmart.check_price": {
                "items": [
                    [
                        "pumpkins",
                        "eggs"
                    ],
                    [
                        "pumpkin",
                        "dozen eggs"
                    ]
                ],
                "quantities": [
                    [
                        3,
                        24
                    ],
                    [
                        3,
                        2
                    ]
                ],
                "store_location": [
                    ""
                ]
            }
        }
    ]
}
{
    "id": 381,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'location': 'Manhattan'. Expected one of ['Manhattan, New York', 'Manhattan, NY', 'NYC', 'New York City']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_380",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Book a single room at a pet friendly hotel near Manhattan, New York for 3 nights starting from March 10th, 2023."
                }
            ]
        ],
        "function": [
            {
                "name": "hotel_booking",
                "description": "Books a hotel room given the location, room type, stay duration and any additional preferences.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "The city where you want to book the hotel."
                        },
                        "room_type": {
                            "type": "string",
                            "description": "Type of the room required. Options: 'single', 'double', 'deluxe', etc."
                        },
                        "duration": {
                            "type": "integer",
                            "description": "The number of nights you want to book the hotel for."
                        },
                        "start_date": {
                            "type": "string",
                            "description": "The date when your stay begins."
                        },
                        "preferences": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "pet_friendly",
                                    "gym",
                                    "swimming_pool",
                                    "free_breakfast",
                                    "parking"
                                ]
                            },
                            "description": "Optional preferences of stay at the hotel. Default to use all if not specified."
                        }
                    },
                    "required": [
                        "location",
                        "room_type",
                        "duration",
                        "start_date"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"hotel_booking\", \"arguments\": {\"location\": \"Manhattan\", \"room_type\": \"single\", \"duration\": 3, \"start_date\": \"2023-03-10\", \"preferences\": [\"pet_friendly\"]}}]\n",
    "model_result_decoded": [
        {
            "hotel_booking": {
                "location": "Manhattan",
                "room_type": "single",
                "duration": 3,
                "start_date": "2023-03-10",
                "preferences": [
                    "pet_friendly"
                ]
            }
        }
    ],
    "possible_answer": [
        {
            "hotel_booking": {
                "location": [
                    "Manhattan, New York",
                    "Manhattan, NY",
                    "NYC",
                    "New York City"
                ],
                "room_type": [
                    "single"
                ],
                "duration": [
                    3
                ],
                "start_date": [
                    "2023-03-10",
                    "03/10/2023",
                    "Mar.10,2023",
                    "March 10th, 2023",
                    "March 10th,2023",
                    "March10th, 2023",
                    "March10th,2023"
                ],
                "preferences": [
                    [
                        "pet_friendly"
                    ]
                ]
            }
        }
    ]
}
{
    "id": 383,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'start_date': '10th December 2022'. Expected one of ['2022-12-10', '10/12/2022', 'Dec 10, 2022', 'December 10, 2022']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_382",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Book a single room for two nights at the Hilton Hotel in Chicago, starting from 10th December 2022."
                }
            ]
        ],
        "function": [
            {
                "name": "book_hotel",
                "description": "Book a room of specified type for a particular number of nights at a specific hotel, starting from a specified date.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "hotel_name": {
                            "type": "string",
                            "description": "The name of the hotel."
                        },
                        "location": {
                            "type": "string",
                            "description": "The city in which the hotel is located."
                        },
                        "room_type": {
                            "type": "string",
                            "description": "The type of room to be booked."
                        },
                        "start_date": {
                            "type": "string",
                            "description": "The start date for the booking."
                        },
                        "nights": {
                            "type": "integer",
                            "description": "The number of nights for which the booking is to be made."
                        }
                    },
                    "required": [
                        "hotel_name",
                        "location",
                        "room_type",
                        "start_date",
                        "nights"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"book_hotel\", \"arguments\": {\"hotel_name\": \"Hilton Hotel\", \"location\": \"Chicago\", \"room_type\": \"single\", \"start_date\": \"10th December 2022\", \"nights\": 2}}]\n",
    "model_result_decoded": [
        {
            "book_hotel": {
                "hotel_name": "Hilton Hotel",
                "location": "Chicago",
                "room_type": "single",
                "start_date": "10th December 2022",
                "nights": 2
            }
        }
    ],
    "possible_answer": [
        {
            "book_hotel": {
                "hotel_name": [
                    "Hilton Hotel",
                    "Hilton"
                ],
                "location": [
                    "Chicago"
                ],
                "room_type": [
                    "single"
                ],
                "start_date": [
                    "2022-12-10",
                    "10/12/2022",
                    "Dec 10, 2022",
                    "December 10, 2022"
                ],
                "nights": [
                    2
                ]
            }
        }
    ]
}
{
    "id": 388,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'end_date': '2022-06-03'. Expected one of ['2022-06-04', '06/04/2022', 'Jun.4,2022']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_387",
        "question": [
            [
                {
                    "role": "user",
                    "content": "Book a hotel room at the Plaza Hotel in New York for 3 nights starting from 1st June 2022"
                }
            ]
        ],
        "function": [
            {
                "name": "hotel_booking",
                "description": "Books a hotel room for a specific date range.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "hotel_name": {
                            "type": "string",
                            "description": "The name of the hotel."
                        },
                        "location": {
                            "type": "string",
                            "description": "The city and state, e.g. New York, NY."
                        },
                        "start_date": {
                            "type": "string",
                            "description": "The start date of the reservation. Use format 'YYYY-MM-DD'."
                        },
                        "end_date": {
                            "type": "string",
                            "description": "The end date of the reservation. Use format 'YYYY-MM-DD'."
                        },
                        "rooms": {
                            "type": "integer",
                            "default": 1,
                            "description": "The number of rooms to reserve."
                        }
                    },
                    "required": [
                        "hotel_name",
                        "location",
                        "start_date",
                        "end_date"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"hotel_booking\", \"arguments\": {\"hotel_name\": \"Plaza Hotel\", \"location\": \"New York, NY\", \"start_date\": \"2022-06-01\", \"end_date\": \"2022-06-03\", \"rooms\": 3}}]\n",
    "model_result_decoded": [
        {
            "hotel_booking": {
                "hotel_name": "Plaza Hotel",
                "location": "New York, NY",
                "start_date": "2022-06-01",
                "end_date": "2022-06-03",
                "rooms": 3
            }
        }
    ],
    "possible_answer": [
        {
            "hotel_booking": {
                "hotel_name": [
                    "Plaza Hotel"
                ],
                "location": [
                    "New York City, NY",
                    "New York, NY"
                ],
                "start_date": [
                    "2022-06-01",
                    "06/01/2022",
                    "Jun.1,2022"
                ],
                "end_date": [
                    "2022-06-04",
                    "06/04/2022",
                    "Jun.4,2022"
                ],
                "rooms": [
                    1,
                    ""
                ]
            }
        }
    ]
}
{
    "id": 389,
    "model_name": "AymanTarig_Qwen2.5-0.5B-FC-v0.14",
    "test_category": "simple",
    "valid": false,
    "error": [
        "Invalid value for parameter 'base_currency': 'CAD'. Expected one of ['USD']. Case insensitive."
    ],
    "error_type": "value_error:string",
    "prompt": {
        "id": "simple_388",
        "question": [
            [
                {
                    "role": "user",
                    "content": "How many Canadian dollars can I get for 500 US dollars?"
                }
            ]
        ],
        "function": [
            {
                "name": "currency_exchange.convert",
                "description": "Convert an amount from a base currency to a target currency based on the current exchange rate.",
                "parameters": {
                    "type": "dict",
                    "properties": {
                        "base_currency": {
                            "type": "string",
                            "description": "The currency to convert from."
                        },
                        "target_currency": {
                            "type": "string",
                            "description": "The currency to convert to."
                        },
                        "amount": {
                            "type": "integer",
                            "description": "The amount in base currency to convert"
                        }
                    },
                    "required": [
                        "base_currency",
                        "target_currency",
                        "amount"
                    ]
                }
            }
        ]
    },
    "model_result_raw": "[{\"name\": \"currency_exchange.convert\", \"arguments\": {\"base_currency\": \"CAD\", \"target_currency\": \"USD\", \"amount\": 500}}]\n",
    "model_result_decoded": [
        {
            "currency_exchange.convert": {
                "base_currency": "CAD",
                "target_currency": "USD",
                "amount": 500
            }
        }
    ],
    "possible_answer": [
        {
            "currency_exchange.convert": {
                "base_currency": [
                    "USD"
                ],
                "target_currency": [
                    "CAD"
                ],
                "amount": [
                    500
                ]
            }
        }
    ]
}